//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace SendFax.FxApi {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="wfApiSoap", Namespace="http://faxcoreserver/services/")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(object[]))]
    public partial class wfApi : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback AuthenticateUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback ServerStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendMessageOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendMixedModeOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendMessage1OperationCompleted;
        
        private System.Threading.SendOrPostCallback SendMessage2OperationCompleted;
        
        private System.Threading.SendOrPostCallback SendMessage3OperationCompleted;
        
        private System.Threading.SendOrPostCallback DelegateMessageOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMessageDetailsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMessageDetails1OperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMessageStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback IsMessageDeletedOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteMessageOperationCompleted;
        
        private System.Threading.SendOrPostCallback CancelMessageOperationCompleted;
        
        private System.Threading.SendOrPostCallback RetryFailedOperationCompleted;
        
        private System.Threading.SendOrPostCallback ForwardToUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback AssignMessageOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMessageListOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMessageList1OperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMessageList2OperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMessageList3OperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMessageList4OperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMessageList5OperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMessageList6OperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMessageList7OperationCompleted;
        
        private System.Threading.SendOrPostCallback DownloadMessageByteOperationCompleted;
        
        private System.Threading.SendOrPostCallback DownloadMessageByte1OperationCompleted;
        
        private System.Threading.SendOrPostCallback DownloadMessageByte2OperationCompleted;
        
        private System.Threading.SendOrPostCallback DownloadMessageByte3OperationCompleted;
        
        private System.Threading.SendOrPostCallback MarkMsgAsReadOperationCompleted;
        
        private System.Threading.SendOrPostCallback MarkMsgAsUnreadOperationCompleted;
        
        private System.Threading.SendOrPostCallback IsMessageReadOperationCompleted;
        
        private System.Threading.SendOrPostCallback MarkMsgAsDownloadedOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTrackRecordsOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateTrackRecordOperationCompleted;
        
        private System.Threading.SendOrPostCallback MoveMessageOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateUser1OperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateUser2OperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateUser1OperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateUser2OperationCompleted;
        
        private System.Threading.SendOrPostCallback RemoveUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeactivateUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeactivateUsersOperationCompleted;
        
        private System.Threading.SendOrPostCallback ActivateUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback ActivateUsersOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUserListOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUserList1OperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUserDetailsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUserDetails1OperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateInboundRouteOperationCompleted;
        
        private System.Threading.SendOrPostCallback SearchIBRouteRulesOperationCompleted;
        
        private System.Threading.SendOrPostCallback DisabledInboudRouteOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMsgFoldersOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDomainListOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUserFaxSettingOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUserFaxSetting1OperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public wfApi() {
            this.Url = global::SendFax.Properties.Settings.Default.SendFax_FxApi_wfApi;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event AuthenticateUserCompletedEventHandler AuthenticateUserCompleted;
        
        /// <remarks/>
        public event ServerStatusCompletedEventHandler ServerStatusCompleted;
        
        /// <remarks/>
        public event SendMessageCompletedEventHandler SendMessageCompleted;
        
        /// <remarks/>
        public event SendMixedModeCompletedEventHandler SendMixedModeCompleted;
        
        /// <remarks/>
        public event SendMessage1CompletedEventHandler SendMessage1Completed;
        
        /// <remarks/>
        public event SendMessage2CompletedEventHandler SendMessage2Completed;
        
        /// <remarks/>
        public event SendMessage3CompletedEventHandler SendMessage3Completed;
        
        /// <remarks/>
        public event DelegateMessageCompletedEventHandler DelegateMessageCompleted;
        
        /// <remarks/>
        public event GetMessageDetailsCompletedEventHandler GetMessageDetailsCompleted;
        
        /// <remarks/>
        public event GetMessageDetails1CompletedEventHandler GetMessageDetails1Completed;
        
        /// <remarks/>
        public event GetMessageStatusCompletedEventHandler GetMessageStatusCompleted;
        
        /// <remarks/>
        public event IsMessageDeletedCompletedEventHandler IsMessageDeletedCompleted;
        
        /// <remarks/>
        public event DeleteMessageCompletedEventHandler DeleteMessageCompleted;
        
        /// <remarks/>
        public event CancelMessageCompletedEventHandler CancelMessageCompleted;
        
        /// <remarks/>
        public event RetryFailedCompletedEventHandler RetryFailedCompleted;
        
        /// <remarks/>
        public event ForwardToUserCompletedEventHandler ForwardToUserCompleted;
        
        /// <remarks/>
        public event AssignMessageCompletedEventHandler AssignMessageCompleted;
        
        /// <remarks/>
        public event GetMessageListCompletedEventHandler GetMessageListCompleted;
        
        /// <remarks/>
        public event GetMessageList1CompletedEventHandler GetMessageList1Completed;
        
        /// <remarks/>
        public event GetMessageList2CompletedEventHandler GetMessageList2Completed;
        
        /// <remarks/>
        public event GetMessageList3CompletedEventHandler GetMessageList3Completed;
        
        /// <remarks/>
        public event GetMessageList4CompletedEventHandler GetMessageList4Completed;
        
        /// <remarks/>
        public event GetMessageList5CompletedEventHandler GetMessageList5Completed;
        
        /// <remarks/>
        public event GetMessageList6CompletedEventHandler GetMessageList6Completed;
        
        /// <remarks/>
        public event GetMessageList7CompletedEventHandler GetMessageList7Completed;
        
        /// <remarks/>
        public event DownloadMessageByteCompletedEventHandler DownloadMessageByteCompleted;
        
        /// <remarks/>
        public event DownloadMessageByte1CompletedEventHandler DownloadMessageByte1Completed;
        
        /// <remarks/>
        public event DownloadMessageByte2CompletedEventHandler DownloadMessageByte2Completed;
        
        /// <remarks/>
        public event DownloadMessageByte3CompletedEventHandler DownloadMessageByte3Completed;
        
        /// <remarks/>
        public event MarkMsgAsReadCompletedEventHandler MarkMsgAsReadCompleted;
        
        /// <remarks/>
        public event MarkMsgAsUnreadCompletedEventHandler MarkMsgAsUnreadCompleted;
        
        /// <remarks/>
        public event IsMessageReadCompletedEventHandler IsMessageReadCompleted;
        
        /// <remarks/>
        public event MarkMsgAsDownloadedCompletedEventHandler MarkMsgAsDownloadedCompleted;
        
        /// <remarks/>
        public event GetTrackRecordsCompletedEventHandler GetTrackRecordsCompleted;
        
        /// <remarks/>
        public event UpdateTrackRecordCompletedEventHandler UpdateTrackRecordCompleted;
        
        /// <remarks/>
        public event MoveMessageCompletedEventHandler MoveMessageCompleted;
        
        /// <remarks/>
        public event CreateUserCompletedEventHandler CreateUserCompleted;
        
        /// <remarks/>
        public event CreateUser1CompletedEventHandler CreateUser1Completed;
        
        /// <remarks/>
        public event CreateUser2CompletedEventHandler CreateUser2Completed;
        
        /// <remarks/>
        public event UpdateUserCompletedEventHandler UpdateUserCompleted;
        
        /// <remarks/>
        public event UpdateUser1CompletedEventHandler UpdateUser1Completed;
        
        /// <remarks/>
        public event UpdateUser2CompletedEventHandler UpdateUser2Completed;
        
        /// <remarks/>
        public event RemoveUserCompletedEventHandler RemoveUserCompleted;
        
        /// <remarks/>
        public event DeactivateUserCompletedEventHandler DeactivateUserCompleted;
        
        /// <remarks/>
        public event DeactivateUsersCompletedEventHandler DeactivateUsersCompleted;
        
        /// <remarks/>
        public event ActivateUserCompletedEventHandler ActivateUserCompleted;
        
        /// <remarks/>
        public event ActivateUsersCompletedEventHandler ActivateUsersCompleted;
        
        /// <remarks/>
        public event GetUserListCompletedEventHandler GetUserListCompleted;
        
        /// <remarks/>
        public event GetUserList1CompletedEventHandler GetUserList1Completed;
        
        /// <remarks/>
        public event GetUserDetailsCompletedEventHandler GetUserDetailsCompleted;
        
        /// <remarks/>
        public event GetUserDetails1CompletedEventHandler GetUserDetails1Completed;
        
        /// <remarks/>
        public event CreateInboundRouteCompletedEventHandler CreateInboundRouteCompleted;
        
        /// <remarks/>
        public event SearchIBRouteRulesCompletedEventHandler SearchIBRouteRulesCompleted;
        
        /// <remarks/>
        public event DisabledInboudRouteCompletedEventHandler DisabledInboudRouteCompleted;
        
        /// <remarks/>
        public event GetMsgFoldersCompletedEventHandler GetMsgFoldersCompleted;
        
        /// <remarks/>
        public event GetDomainListCompletedEventHandler GetDomainListCompleted;
        
        /// <remarks/>
        public event GetUserFaxSettingCompletedEventHandler GetUserFaxSettingCompleted;
        
        /// <remarks/>
        public event GetUserFaxSetting1CompletedEventHandler GetUserFaxSetting1Completed;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://faxcoreserver/services/AuthenticateUser", RequestNamespace="http://faxcoreserver/services/", ResponseNamespace="http://faxcoreserver/services/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public long AuthenticateUser(string userName, string password) {
            object[] results = this.Invoke("AuthenticateUser", new object[] {
                        userName,
                        password});
            return ((long)(results[0]));
        }
        
        /// <remarks/>
        public void AuthenticateUserAsync(string userName, string password) {
            this.AuthenticateUserAsync(userName, password, null);
        }
        
        /// <remarks/>
        public void AuthenticateUserAsync(string userName, string password, object userState) {
            if ((this.AuthenticateUserOperationCompleted == null)) {
                this.AuthenticateUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAuthenticateUserOperationCompleted);
            }
            this.InvokeAsync("AuthenticateUser", new object[] {
                        userName,
                        password}, this.AuthenticateUserOperationCompleted, userState);
        }
        
        private void OnAuthenticateUserOperationCompleted(object arg) {
            if ((this.AuthenticateUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AuthenticateUserCompleted(this, new AuthenticateUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://faxcoreserver/services/ServerStatus", RequestNamespace="http://faxcoreserver/services/", ResponseNamespace="http://faxcoreserver/services/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ServerStatus() {
            object[] results = this.Invoke("ServerStatus", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ServerStatusAsync() {
            this.ServerStatusAsync(null);
        }
        
        /// <remarks/>
        public void ServerStatusAsync(object userState) {
            if ((this.ServerStatusOperationCompleted == null)) {
                this.ServerStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnServerStatusOperationCompleted);
            }
            this.InvokeAsync("ServerStatus", new object[0], this.ServerStatusOperationCompleted, userState);
        }
        
        private void OnServerStatusOperationCompleted(object arg) {
            if ((this.ServerStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ServerStatusCompleted(this, new ServerStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://faxcoreserver/services/SendCompleteMessage", RequestElementName="SendCompleteMessage", RequestNamespace="http://faxcoreserver/services/", ResponseElementName="SendCompleteMessageResponse", ResponseNamespace="http://faxcoreserver/services/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("SendCompleteMessageResult")]
        public string SendMessage(
                    long userID, 
                    string senderName, 
                    string senderCompName, 
                    string subject, 
                    string note, 
                    string billingCode, 
                    string scheduleDate, 
                    int priority, 
                    bool isOnHold, 
                    bool mss, 
                    bool msf, 
                    string[] trackLabel, 
                    string[] trackValue, 
                    string[] recpName, 
                    string[] recpCompName, 
                    string[] recpAddress, 
                    bool[] recpRawFax, 
                    string[] recpNotifyAddr, 
                    bool[] recpIsRRFOn, 
                    bool[] recpIsRRSOn, 
                    string[] documentName, 
                    string[] documentPath, 
                    object[] documentBytes, 
                    bool[] documentIsMerge) {
            object[] results = this.Invoke("SendMessage", new object[] {
                        userID,
                        senderName,
                        senderCompName,
                        subject,
                        note,
                        billingCode,
                        scheduleDate,
                        priority,
                        isOnHold,
                        mss,
                        msf,
                        trackLabel,
                        trackValue,
                        recpName,
                        recpCompName,
                        recpAddress,
                        recpRawFax,
                        recpNotifyAddr,
                        recpIsRRFOn,
                        recpIsRRSOn,
                        documentName,
                        documentPath,
                        documentBytes,
                        documentIsMerge});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SendMessageAsync(
                    long userID, 
                    string senderName, 
                    string senderCompName, 
                    string subject, 
                    string note, 
                    string billingCode, 
                    string scheduleDate, 
                    int priority, 
                    bool isOnHold, 
                    bool mss, 
                    bool msf, 
                    string[] trackLabel, 
                    string[] trackValue, 
                    string[] recpName, 
                    string[] recpCompName, 
                    string[] recpAddress, 
                    bool[] recpRawFax, 
                    string[] recpNotifyAddr, 
                    bool[] recpIsRRFOn, 
                    bool[] recpIsRRSOn, 
                    string[] documentName, 
                    string[] documentPath, 
                    object[] documentBytes, 
                    bool[] documentIsMerge) {
            this.SendMessageAsync(userID, senderName, senderCompName, subject, note, billingCode, scheduleDate, priority, isOnHold, mss, msf, trackLabel, trackValue, recpName, recpCompName, recpAddress, recpRawFax, recpNotifyAddr, recpIsRRFOn, recpIsRRSOn, documentName, documentPath, documentBytes, documentIsMerge, null);
        }
        
        /// <remarks/>
        public void SendMessageAsync(
                    long userID, 
                    string senderName, 
                    string senderCompName, 
                    string subject, 
                    string note, 
                    string billingCode, 
                    string scheduleDate, 
                    int priority, 
                    bool isOnHold, 
                    bool mss, 
                    bool msf, 
                    string[] trackLabel, 
                    string[] trackValue, 
                    string[] recpName, 
                    string[] recpCompName, 
                    string[] recpAddress, 
                    bool[] recpRawFax, 
                    string[] recpNotifyAddr, 
                    bool[] recpIsRRFOn, 
                    bool[] recpIsRRSOn, 
                    string[] documentName, 
                    string[] documentPath, 
                    object[] documentBytes, 
                    bool[] documentIsMerge, 
                    object userState) {
            if ((this.SendMessageOperationCompleted == null)) {
                this.SendMessageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendMessageOperationCompleted);
            }
            this.InvokeAsync("SendMessage", new object[] {
                        userID,
                        senderName,
                        senderCompName,
                        subject,
                        note,
                        billingCode,
                        scheduleDate,
                        priority,
                        isOnHold,
                        mss,
                        msf,
                        trackLabel,
                        trackValue,
                        recpName,
                        recpCompName,
                        recpAddress,
                        recpRawFax,
                        recpNotifyAddr,
                        recpIsRRFOn,
                        recpIsRRSOn,
                        documentName,
                        documentPath,
                        documentBytes,
                        documentIsMerge}, this.SendMessageOperationCompleted, userState);
        }
        
        private void OnSendMessageOperationCompleted(object arg) {
            if ((this.SendMessageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendMessageCompleted(this, new SendMessageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://faxcoreserver/services/SendMixedMode", RequestNamespace="http://faxcoreserver/services/", ResponseNamespace="http://faxcoreserver/services/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SendMixedMode(
                    string userID, 
                    string senderName, 
                    string senderCompName, 
                    string subject, 
                    string note, 
                    string billingCode, 
                    int priority, 
                    string scheduleDate, 
                    bool isOnHold, 
                    bool mss, 
                    bool msf, 
                    bool useDefaultNotify, 
                    bool useDefaultCP, 
                    MsgDocument[] documents, 
                    MsgRecipient[] recipients, 
                    MsgTracking[] trackings) {
            object[] results = this.Invoke("SendMixedMode", new object[] {
                        userID,
                        senderName,
                        senderCompName,
                        subject,
                        note,
                        billingCode,
                        priority,
                        scheduleDate,
                        isOnHold,
                        mss,
                        msf,
                        useDefaultNotify,
                        useDefaultCP,
                        documents,
                        recipients,
                        trackings});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SendMixedModeAsync(
                    string userID, 
                    string senderName, 
                    string senderCompName, 
                    string subject, 
                    string note, 
                    string billingCode, 
                    int priority, 
                    string scheduleDate, 
                    bool isOnHold, 
                    bool mss, 
                    bool msf, 
                    bool useDefaultNotify, 
                    bool useDefaultCP, 
                    MsgDocument[] documents, 
                    MsgRecipient[] recipients, 
                    MsgTracking[] trackings) {
            this.SendMixedModeAsync(userID, senderName, senderCompName, subject, note, billingCode, priority, scheduleDate, isOnHold, mss, msf, useDefaultNotify, useDefaultCP, documents, recipients, trackings, null);
        }
        
        /// <remarks/>
        public void SendMixedModeAsync(
                    string userID, 
                    string senderName, 
                    string senderCompName, 
                    string subject, 
                    string note, 
                    string billingCode, 
                    int priority, 
                    string scheduleDate, 
                    bool isOnHold, 
                    bool mss, 
                    bool msf, 
                    bool useDefaultNotify, 
                    bool useDefaultCP, 
                    MsgDocument[] documents, 
                    MsgRecipient[] recipients, 
                    MsgTracking[] trackings, 
                    object userState) {
            if ((this.SendMixedModeOperationCompleted == null)) {
                this.SendMixedModeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendMixedModeOperationCompleted);
            }
            this.InvokeAsync("SendMixedMode", new object[] {
                        userID,
                        senderName,
                        senderCompName,
                        subject,
                        note,
                        billingCode,
                        priority,
                        scheduleDate,
                        isOnHold,
                        mss,
                        msf,
                        useDefaultNotify,
                        useDefaultCP,
                        documents,
                        recipients,
                        trackings}, this.SendMixedModeOperationCompleted, userState);
        }
        
        private void OnSendMixedModeOperationCompleted(object arg) {
            if ((this.SendMixedModeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendMixedModeCompleted(this, new SendMixedModeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="SendMessage1")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://faxcoreserver/services/BasicSendMessageWithBytes", RequestElementName="BasicSendMessageWithBytes", RequestNamespace="http://faxcoreserver/services/", ResponseElementName="BasicSendMessageWithBytesResponse", ResponseNamespace="http://faxcoreserver/services/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("BasicSendMessageWithBytesResult")]
        public string SendMessage(long userID, string senderName, string senderCompName, string subject, string note, string[] trackLabel, string[] trackValue, string[] recpName, string[] recpAddress, bool[] recpRawFax, string[] documentName, object[] documentBytes, bool[] documentIsMerge) {
            object[] results = this.Invoke("SendMessage1", new object[] {
                        userID,
                        senderName,
                        senderCompName,
                        subject,
                        note,
                        trackLabel,
                        trackValue,
                        recpName,
                        recpAddress,
                        recpRawFax,
                        documentName,
                        documentBytes,
                        documentIsMerge});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SendMessage1Async(long userID, string senderName, string senderCompName, string subject, string note, string[] trackLabel, string[] trackValue, string[] recpName, string[] recpAddress, bool[] recpRawFax, string[] documentName, object[] documentBytes, bool[] documentIsMerge) {
            this.SendMessage1Async(userID, senderName, senderCompName, subject, note, trackLabel, trackValue, recpName, recpAddress, recpRawFax, documentName, documentBytes, documentIsMerge, null);
        }
        
        /// <remarks/>
        public void SendMessage1Async(long userID, string senderName, string senderCompName, string subject, string note, string[] trackLabel, string[] trackValue, string[] recpName, string[] recpAddress, bool[] recpRawFax, string[] documentName, object[] documentBytes, bool[] documentIsMerge, object userState) {
            if ((this.SendMessage1OperationCompleted == null)) {
                this.SendMessage1OperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendMessage1OperationCompleted);
            }
            this.InvokeAsync("SendMessage1", new object[] {
                        userID,
                        senderName,
                        senderCompName,
                        subject,
                        note,
                        trackLabel,
                        trackValue,
                        recpName,
                        recpAddress,
                        recpRawFax,
                        documentName,
                        documentBytes,
                        documentIsMerge}, this.SendMessage1OperationCompleted, userState);
        }
        
        private void OnSendMessage1OperationCompleted(object arg) {
            if ((this.SendMessage1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendMessage1Completed(this, new SendMessage1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="SendMessage2")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://faxcoreserver/services/SendCompleteMessageWithPresetAgents", RequestElementName="SendCompleteMessageWithPresetAgents", RequestNamespace="http://faxcoreserver/services/", ResponseElementName="SendCompleteMessageWithPresetAgentsResponse", ResponseNamespace="http://faxcoreserver/services/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("SendCompleteMessageWithPresetAgentsResult")]
        public string SendMessage(
                    long userID, 
                    string senderName, 
                    string senderCompName, 
                    string subject, 
                    string note, 
                    string billingCode, 
                    string scheduleDate, 
                    int priority, 
                    bool isOnHold, 
                    bool mss, 
                    bool msf, 
                    string[] trackLabel, 
                    string[] trackValue, 
                    string[] recpName, 
                    string[] recpCompName, 
                    string[] recpAddress, 
                    bool[] recpRawFax, 
                    string[] recpNotifyAddr, 
                    bool[] recpIsRRFOn, 
                    bool[] recpIsRRSOn, 
                    string[] documentName, 
                    string[] documentPath, 
                    object[] documentBytes, 
                    bool[] documentIsMerge, 
                    int[] agentID, 
                    int[] presetType, 
                    int[] presetValue) {
            object[] results = this.Invoke("SendMessage2", new object[] {
                        userID,
                        senderName,
                        senderCompName,
                        subject,
                        note,
                        billingCode,
                        scheduleDate,
                        priority,
                        isOnHold,
                        mss,
                        msf,
                        trackLabel,
                        trackValue,
                        recpName,
                        recpCompName,
                        recpAddress,
                        recpRawFax,
                        recpNotifyAddr,
                        recpIsRRFOn,
                        recpIsRRSOn,
                        documentName,
                        documentPath,
                        documentBytes,
                        documentIsMerge,
                        agentID,
                        presetType,
                        presetValue});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SendMessage2Async(
                    long userID, 
                    string senderName, 
                    string senderCompName, 
                    string subject, 
                    string note, 
                    string billingCode, 
                    string scheduleDate, 
                    int priority, 
                    bool isOnHold, 
                    bool mss, 
                    bool msf, 
                    string[] trackLabel, 
                    string[] trackValue, 
                    string[] recpName, 
                    string[] recpCompName, 
                    string[] recpAddress, 
                    bool[] recpRawFax, 
                    string[] recpNotifyAddr, 
                    bool[] recpIsRRFOn, 
                    bool[] recpIsRRSOn, 
                    string[] documentName, 
                    string[] documentPath, 
                    object[] documentBytes, 
                    bool[] documentIsMerge, 
                    int[] agentID, 
                    int[] presetType, 
                    int[] presetValue) {
            this.SendMessage2Async(userID, senderName, senderCompName, subject, note, billingCode, scheduleDate, priority, isOnHold, mss, msf, trackLabel, trackValue, recpName, recpCompName, recpAddress, recpRawFax, recpNotifyAddr, recpIsRRFOn, recpIsRRSOn, documentName, documentPath, documentBytes, documentIsMerge, agentID, presetType, presetValue, null);
        }
        
        /// <remarks/>
        public void SendMessage2Async(
                    long userID, 
                    string senderName, 
                    string senderCompName, 
                    string subject, 
                    string note, 
                    string billingCode, 
                    string scheduleDate, 
                    int priority, 
                    bool isOnHold, 
                    bool mss, 
                    bool msf, 
                    string[] trackLabel, 
                    string[] trackValue, 
                    string[] recpName, 
                    string[] recpCompName, 
                    string[] recpAddress, 
                    bool[] recpRawFax, 
                    string[] recpNotifyAddr, 
                    bool[] recpIsRRFOn, 
                    bool[] recpIsRRSOn, 
                    string[] documentName, 
                    string[] documentPath, 
                    object[] documentBytes, 
                    bool[] documentIsMerge, 
                    int[] agentID, 
                    int[] presetType, 
                    int[] presetValue, 
                    object userState) {
            if ((this.SendMessage2OperationCompleted == null)) {
                this.SendMessage2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendMessage2OperationCompleted);
            }
            this.InvokeAsync("SendMessage2", new object[] {
                        userID,
                        senderName,
                        senderCompName,
                        subject,
                        note,
                        billingCode,
                        scheduleDate,
                        priority,
                        isOnHold,
                        mss,
                        msf,
                        trackLabel,
                        trackValue,
                        recpName,
                        recpCompName,
                        recpAddress,
                        recpRawFax,
                        recpNotifyAddr,
                        recpIsRRFOn,
                        recpIsRRSOn,
                        documentName,
                        documentPath,
                        documentBytes,
                        documentIsMerge,
                        agentID,
                        presetType,
                        presetValue}, this.SendMessage2OperationCompleted, userState);
        }
        
        private void OnSendMessage2OperationCompleted(object arg) {
            if ((this.SendMessage2Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendMessage2Completed(this, new SendMessage2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="SendMessage3")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://faxcoreserver/services/SendCompleteMessageWithPresetAgentsAndByPassRender", RequestElementName="SendCompleteMessageWithPresetAgentsAndByPassRender", RequestNamespace="http://faxcoreserver/services/", ResponseElementName="SendCompleteMessageWithPresetAgentsAndByPassRenderResponse", ResponseNamespace="http://faxcoreserver/services/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("SendCompleteMessageWithPresetAgentsAndByPassRenderResult")]
        public string SendMessage(
                    long userID, 
                    string senderName, 
                    string senderCompName, 
                    string subject, 
                    string note, 
                    string billingCode, 
                    string scheduleDate, 
                    int priority, 
                    bool isOnHold, 
                    bool mss, 
                    bool msf, 
                    string[] trackLabel, 
                    string[] trackValue, 
                    string[] recpName, 
                    string[] recpCompName, 
                    string[] recpAddress, 
                    bool[] recpRawFax, 
                    string[] recpNotifyAddr, 
                    bool[] recpIsRRFOn, 
                    bool[] recpIsRRSOn, 
                    string[] documentName, 
                    string[] documentPath, 
                    object[] documentBytes, 
                    bool[] documentIsMerge, 
                    int[] agentID, 
                    int[] presetType, 
                    int[] presetValue, 
                    bool byPassRender) {
            object[] results = this.Invoke("SendMessage3", new object[] {
                        userID,
                        senderName,
                        senderCompName,
                        subject,
                        note,
                        billingCode,
                        scheduleDate,
                        priority,
                        isOnHold,
                        mss,
                        msf,
                        trackLabel,
                        trackValue,
                        recpName,
                        recpCompName,
                        recpAddress,
                        recpRawFax,
                        recpNotifyAddr,
                        recpIsRRFOn,
                        recpIsRRSOn,
                        documentName,
                        documentPath,
                        documentBytes,
                        documentIsMerge,
                        agentID,
                        presetType,
                        presetValue,
                        byPassRender});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SendMessage3Async(
                    long userID, 
                    string senderName, 
                    string senderCompName, 
                    string subject, 
                    string note, 
                    string billingCode, 
                    string scheduleDate, 
                    int priority, 
                    bool isOnHold, 
                    bool mss, 
                    bool msf, 
                    string[] trackLabel, 
                    string[] trackValue, 
                    string[] recpName, 
                    string[] recpCompName, 
                    string[] recpAddress, 
                    bool[] recpRawFax, 
                    string[] recpNotifyAddr, 
                    bool[] recpIsRRFOn, 
                    bool[] recpIsRRSOn, 
                    string[] documentName, 
                    string[] documentPath, 
                    object[] documentBytes, 
                    bool[] documentIsMerge, 
                    int[] agentID, 
                    int[] presetType, 
                    int[] presetValue, 
                    bool byPassRender) {
            this.SendMessage3Async(userID, senderName, senderCompName, subject, note, billingCode, scheduleDate, priority, isOnHold, mss, msf, trackLabel, trackValue, recpName, recpCompName, recpAddress, recpRawFax, recpNotifyAddr, recpIsRRFOn, recpIsRRSOn, documentName, documentPath, documentBytes, documentIsMerge, agentID, presetType, presetValue, byPassRender, null);
        }
        
        /// <remarks/>
        public void SendMessage3Async(
                    long userID, 
                    string senderName, 
                    string senderCompName, 
                    string subject, 
                    string note, 
                    string billingCode, 
                    string scheduleDate, 
                    int priority, 
                    bool isOnHold, 
                    bool mss, 
                    bool msf, 
                    string[] trackLabel, 
                    string[] trackValue, 
                    string[] recpName, 
                    string[] recpCompName, 
                    string[] recpAddress, 
                    bool[] recpRawFax, 
                    string[] recpNotifyAddr, 
                    bool[] recpIsRRFOn, 
                    bool[] recpIsRRSOn, 
                    string[] documentName, 
                    string[] documentPath, 
                    object[] documentBytes, 
                    bool[] documentIsMerge, 
                    int[] agentID, 
                    int[] presetType, 
                    int[] presetValue, 
                    bool byPassRender, 
                    object userState) {
            if ((this.SendMessage3OperationCompleted == null)) {
                this.SendMessage3OperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendMessage3OperationCompleted);
            }
            this.InvokeAsync("SendMessage3", new object[] {
                        userID,
                        senderName,
                        senderCompName,
                        subject,
                        note,
                        billingCode,
                        scheduleDate,
                        priority,
                        isOnHold,
                        mss,
                        msf,
                        trackLabel,
                        trackValue,
                        recpName,
                        recpCompName,
                        recpAddress,
                        recpRawFax,
                        recpNotifyAddr,
                        recpIsRRFOn,
                        recpIsRRSOn,
                        documentName,
                        documentPath,
                        documentBytes,
                        documentIsMerge,
                        agentID,
                        presetType,
                        presetValue,
                        byPassRender}, this.SendMessage3OperationCompleted, userState);
        }
        
        private void OnSendMessage3OperationCompleted(object arg) {
            if ((this.SendMessage3Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendMessage3Completed(this, new SendMessage3CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://faxcoreserver/services/DelegateMessage", RequestNamespace="http://faxcoreserver/services/", ResponseNamespace="http://faxcoreserver/services/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string DelegateMessage(
                    long delegateUserID, 
                    string userName, 
                    string senderName, 
                    string senderCompName, 
                    string subject, 
                    string note, 
                    string billingCode, 
                    string scheduleDate, 
                    int priority, 
                    bool isOnHold, 
                    bool mss, 
                    bool msf, 
                    string[] trackLabel, 
                    string[] trackValue, 
                    string[] recpName, 
                    string[] recpCompName, 
                    string[] recpAddress, 
                    bool[] recpRawFax, 
                    string[] recpNotifyAddr, 
                    bool[] recpIsRRFOn, 
                    bool[] recpIsRRSOn, 
                    string[] documentName, 
                    string[] documentPath, 
                    object[] documentBytes, 
                    bool[] documentIsMerge) {
            object[] results = this.Invoke("DelegateMessage", new object[] {
                        delegateUserID,
                        userName,
                        senderName,
                        senderCompName,
                        subject,
                        note,
                        billingCode,
                        scheduleDate,
                        priority,
                        isOnHold,
                        mss,
                        msf,
                        trackLabel,
                        trackValue,
                        recpName,
                        recpCompName,
                        recpAddress,
                        recpRawFax,
                        recpNotifyAddr,
                        recpIsRRFOn,
                        recpIsRRSOn,
                        documentName,
                        documentPath,
                        documentBytes,
                        documentIsMerge});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void DelegateMessageAsync(
                    long delegateUserID, 
                    string userName, 
                    string senderName, 
                    string senderCompName, 
                    string subject, 
                    string note, 
                    string billingCode, 
                    string scheduleDate, 
                    int priority, 
                    bool isOnHold, 
                    bool mss, 
                    bool msf, 
                    string[] trackLabel, 
                    string[] trackValue, 
                    string[] recpName, 
                    string[] recpCompName, 
                    string[] recpAddress, 
                    bool[] recpRawFax, 
                    string[] recpNotifyAddr, 
                    bool[] recpIsRRFOn, 
                    bool[] recpIsRRSOn, 
                    string[] documentName, 
                    string[] documentPath, 
                    object[] documentBytes, 
                    bool[] documentIsMerge) {
            this.DelegateMessageAsync(delegateUserID, userName, senderName, senderCompName, subject, note, billingCode, scheduleDate, priority, isOnHold, mss, msf, trackLabel, trackValue, recpName, recpCompName, recpAddress, recpRawFax, recpNotifyAddr, recpIsRRFOn, recpIsRRSOn, documentName, documentPath, documentBytes, documentIsMerge, null);
        }
        
        /// <remarks/>
        public void DelegateMessageAsync(
                    long delegateUserID, 
                    string userName, 
                    string senderName, 
                    string senderCompName, 
                    string subject, 
                    string note, 
                    string billingCode, 
                    string scheduleDate, 
                    int priority, 
                    bool isOnHold, 
                    bool mss, 
                    bool msf, 
                    string[] trackLabel, 
                    string[] trackValue, 
                    string[] recpName, 
                    string[] recpCompName, 
                    string[] recpAddress, 
                    bool[] recpRawFax, 
                    string[] recpNotifyAddr, 
                    bool[] recpIsRRFOn, 
                    bool[] recpIsRRSOn, 
                    string[] documentName, 
                    string[] documentPath, 
                    object[] documentBytes, 
                    bool[] documentIsMerge, 
                    object userState) {
            if ((this.DelegateMessageOperationCompleted == null)) {
                this.DelegateMessageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDelegateMessageOperationCompleted);
            }
            this.InvokeAsync("DelegateMessage", new object[] {
                        delegateUserID,
                        userName,
                        senderName,
                        senderCompName,
                        subject,
                        note,
                        billingCode,
                        scheduleDate,
                        priority,
                        isOnHold,
                        mss,
                        msf,
                        trackLabel,
                        trackValue,
                        recpName,
                        recpCompName,
                        recpAddress,
                        recpRawFax,
                        recpNotifyAddr,
                        recpIsRRFOn,
                        recpIsRRSOn,
                        documentName,
                        documentPath,
                        documentBytes,
                        documentIsMerge}, this.DelegateMessageOperationCompleted, userState);
        }
        
        private void OnDelegateMessageOperationCompleted(object arg) {
            if ((this.DelegateMessageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DelegateMessageCompleted(this, new DelegateMessageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://faxcoreserver/services/GetMessageDetails1", RequestElementName="GetMessageDetails1", RequestNamespace="http://faxcoreserver/services/", ResponseElementName="GetMessageDetails1Response", ResponseNamespace="http://faxcoreserver/services/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("GetMessageDetails1Result")]
        public string GetMessageDetails(string msgID) {
            object[] results = this.Invoke("GetMessageDetails", new object[] {
                        msgID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetMessageDetailsAsync(string msgID) {
            this.GetMessageDetailsAsync(msgID, null);
        }
        
        /// <remarks/>
        public void GetMessageDetailsAsync(string msgID, object userState) {
            if ((this.GetMessageDetailsOperationCompleted == null)) {
                this.GetMessageDetailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMessageDetailsOperationCompleted);
            }
            this.InvokeAsync("GetMessageDetails", new object[] {
                        msgID}, this.GetMessageDetailsOperationCompleted, userState);
        }
        
        private void OnGetMessageDetailsOperationCompleted(object arg) {
            if ((this.GetMessageDetailsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMessageDetailsCompleted(this, new GetMessageDetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="GetMessageDetails1")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://faxcoreserver/services/GetMessageDetails2", RequestElementName="GetMessageDetails2", RequestNamespace="http://faxcoreserver/services/", ResponseElementName="GetMessageDetails2Response", ResponseNamespace="http://faxcoreserver/services/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("GetMessageDetails2Result")]
        public string GetMessageDetails(string msgID, long userID) {
            object[] results = this.Invoke("GetMessageDetails1", new object[] {
                        msgID,
                        userID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetMessageDetails1Async(string msgID, long userID) {
            this.GetMessageDetails1Async(msgID, userID, null);
        }
        
        /// <remarks/>
        public void GetMessageDetails1Async(string msgID, long userID, object userState) {
            if ((this.GetMessageDetails1OperationCompleted == null)) {
                this.GetMessageDetails1OperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMessageDetails1OperationCompleted);
            }
            this.InvokeAsync("GetMessageDetails1", new object[] {
                        msgID,
                        userID}, this.GetMessageDetails1OperationCompleted, userState);
        }
        
        private void OnGetMessageDetails1OperationCompleted(object arg) {
            if ((this.GetMessageDetails1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMessageDetails1Completed(this, new GetMessageDetails1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://faxcoreserver/services/GetMessageStatus", RequestNamespace="http://faxcoreserver/services/", ResponseNamespace="http://faxcoreserver/services/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetMessageStatus(string msgID) {
            object[] results = this.Invoke("GetMessageStatus", new object[] {
                        msgID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetMessageStatusAsync(string msgID) {
            this.GetMessageStatusAsync(msgID, null);
        }
        
        /// <remarks/>
        public void GetMessageStatusAsync(string msgID, object userState) {
            if ((this.GetMessageStatusOperationCompleted == null)) {
                this.GetMessageStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMessageStatusOperationCompleted);
            }
            this.InvokeAsync("GetMessageStatus", new object[] {
                        msgID}, this.GetMessageStatusOperationCompleted, userState);
        }
        
        private void OnGetMessageStatusOperationCompleted(object arg) {
            if ((this.GetMessageStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMessageStatusCompleted(this, new GetMessageStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://faxcoreserver/services/IsMessageDeleted", RequestNamespace="http://faxcoreserver/services/", ResponseNamespace="http://faxcoreserver/services/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string IsMessageDeleted(string messageID, string userID) {
            object[] results = this.Invoke("IsMessageDeleted", new object[] {
                        messageID,
                        userID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void IsMessageDeletedAsync(string messageID, string userID) {
            this.IsMessageDeletedAsync(messageID, userID, null);
        }
        
        /// <remarks/>
        public void IsMessageDeletedAsync(string messageID, string userID, object userState) {
            if ((this.IsMessageDeletedOperationCompleted == null)) {
                this.IsMessageDeletedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsMessageDeletedOperationCompleted);
            }
            this.InvokeAsync("IsMessageDeleted", new object[] {
                        messageID,
                        userID}, this.IsMessageDeletedOperationCompleted, userState);
        }
        
        private void OnIsMessageDeletedOperationCompleted(object arg) {
            if ((this.IsMessageDeletedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsMessageDeletedCompleted(this, new IsMessageDeletedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://faxcoreserver/services/DeleteMessage", RequestNamespace="http://faxcoreserver/services/", ResponseNamespace="http://faxcoreserver/services/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string DeleteMessage(string msgID, long userID) {
            object[] results = this.Invoke("DeleteMessage", new object[] {
                        msgID,
                        userID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void DeleteMessageAsync(string msgID, long userID) {
            this.DeleteMessageAsync(msgID, userID, null);
        }
        
        /// <remarks/>
        public void DeleteMessageAsync(string msgID, long userID, object userState) {
            if ((this.DeleteMessageOperationCompleted == null)) {
                this.DeleteMessageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteMessageOperationCompleted);
            }
            this.InvokeAsync("DeleteMessage", new object[] {
                        msgID,
                        userID}, this.DeleteMessageOperationCompleted, userState);
        }
        
        private void OnDeleteMessageOperationCompleted(object arg) {
            if ((this.DeleteMessageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteMessageCompleted(this, new DeleteMessageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://faxcoreserver/services/CancelMessage", RequestNamespace="http://faxcoreserver/services/", ResponseNamespace="http://faxcoreserver/services/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CancelMessage(string msgID) {
            object[] results = this.Invoke("CancelMessage", new object[] {
                        msgID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CancelMessageAsync(string msgID) {
            this.CancelMessageAsync(msgID, null);
        }
        
        /// <remarks/>
        public void CancelMessageAsync(string msgID, object userState) {
            if ((this.CancelMessageOperationCompleted == null)) {
                this.CancelMessageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCancelMessageOperationCompleted);
            }
            this.InvokeAsync("CancelMessage", new object[] {
                        msgID}, this.CancelMessageOperationCompleted, userState);
        }
        
        private void OnCancelMessageOperationCompleted(object arg) {
            if ((this.CancelMessageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CancelMessageCompleted(this, new CancelMessageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://faxcoreserver/services/RetryFailed", RequestNamespace="http://faxcoreserver/services/", ResponseNamespace="http://faxcoreserver/services/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string RetryFailed(string msgID) {
            object[] results = this.Invoke("RetryFailed", new object[] {
                        msgID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void RetryFailedAsync(string msgID) {
            this.RetryFailedAsync(msgID, null);
        }
        
        /// <remarks/>
        public void RetryFailedAsync(string msgID, object userState) {
            if ((this.RetryFailedOperationCompleted == null)) {
                this.RetryFailedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRetryFailedOperationCompleted);
            }
            this.InvokeAsync("RetryFailed", new object[] {
                        msgID}, this.RetryFailedOperationCompleted, userState);
        }
        
        private void OnRetryFailedOperationCompleted(object arg) {
            if ((this.RetryFailedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RetryFailedCompleted(this, new RetryFailedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://faxcoreserver/services/ForwardToUser", RequestNamespace="http://faxcoreserver/services/", ResponseNamespace="http://faxcoreserver/services/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ForwardToUser(string userID, string msgID, string[] usernames) {
            object[] results = this.Invoke("ForwardToUser", new object[] {
                        userID,
                        msgID,
                        usernames});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ForwardToUserAsync(string userID, string msgID, string[] usernames) {
            this.ForwardToUserAsync(userID, msgID, usernames, null);
        }
        
        /// <remarks/>
        public void ForwardToUserAsync(string userID, string msgID, string[] usernames, object userState) {
            if ((this.ForwardToUserOperationCompleted == null)) {
                this.ForwardToUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnForwardToUserOperationCompleted);
            }
            this.InvokeAsync("ForwardToUser", new object[] {
                        userID,
                        msgID,
                        usernames}, this.ForwardToUserOperationCompleted, userState);
        }
        
        private void OnForwardToUserOperationCompleted(object arg) {
            if ((this.ForwardToUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ForwardToUserCompleted(this, new ForwardToUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://faxcoreserver/services/AssignMessage", RequestNamespace="http://faxcoreserver/services/", ResponseNamespace="http://faxcoreserver/services/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string AssignMessage(string userID, string msgID, string[] usernames) {
            object[] results = this.Invoke("AssignMessage", new object[] {
                        userID,
                        msgID,
                        usernames});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void AssignMessageAsync(string userID, string msgID, string[] usernames) {
            this.AssignMessageAsync(userID, msgID, usernames, null);
        }
        
        /// <remarks/>
        public void AssignMessageAsync(string userID, string msgID, string[] usernames, object userState) {
            if ((this.AssignMessageOperationCompleted == null)) {
                this.AssignMessageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAssignMessageOperationCompleted);
            }
            this.InvokeAsync("AssignMessage", new object[] {
                        userID,
                        msgID,
                        usernames}, this.AssignMessageOperationCompleted, userState);
        }
        
        private void OnAssignMessageOperationCompleted(object arg) {
            if ((this.AssignMessageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AssignMessageCompleted(this, new AssignMessageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://faxcoreserver/services/GetMessageList3", RequestElementName="GetMessageList3", RequestNamespace="http://faxcoreserver/services/", ResponseElementName="GetMessageList3Response", ResponseNamespace="http://faxcoreserver/services/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute("GetMessageList3Result")]
        public string[] GetMessageList(long userID, string folderName, bool isRead, bool sortDescending, int maxResults) {
            object[] results = this.Invoke("GetMessageList", new object[] {
                        userID,
                        folderName,
                        isRead,
                        sortDescending,
                        maxResults});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void GetMessageListAsync(long userID, string folderName, bool isRead, bool sortDescending, int maxResults) {
            this.GetMessageListAsync(userID, folderName, isRead, sortDescending, maxResults, null);
        }
        
        /// <remarks/>
        public void GetMessageListAsync(long userID, string folderName, bool isRead, bool sortDescending, int maxResults, object userState) {
            if ((this.GetMessageListOperationCompleted == null)) {
                this.GetMessageListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMessageListOperationCompleted);
            }
            this.InvokeAsync("GetMessageList", new object[] {
                        userID,
                        folderName,
                        isRead,
                        sortDescending,
                        maxResults}, this.GetMessageListOperationCompleted, userState);
        }
        
        private void OnGetMessageListOperationCompleted(object arg) {
            if ((this.GetMessageListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMessageListCompleted(this, new GetMessageListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="GetMessageList1")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://faxcoreserver/services/GetMessageList2", RequestElementName="GetMessageList2", RequestNamespace="http://faxcoreserver/services/", ResponseElementName="GetMessageList2Response", ResponseNamespace="http://faxcoreserver/services/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute("GetMessageList2Result")]
        public string[] GetMessageList(long userID, string folderName, bool isRead, string startDate, string endDate, bool sortDescending, int maxResults) {
            object[] results = this.Invoke("GetMessageList1", new object[] {
                        userID,
                        folderName,
                        isRead,
                        startDate,
                        endDate,
                        sortDescending,
                        maxResults});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void GetMessageList1Async(long userID, string folderName, bool isRead, string startDate, string endDate, bool sortDescending, int maxResults) {
            this.GetMessageList1Async(userID, folderName, isRead, startDate, endDate, sortDescending, maxResults, null);
        }
        
        /// <remarks/>
        public void GetMessageList1Async(long userID, string folderName, bool isRead, string startDate, string endDate, bool sortDescending, int maxResults, object userState) {
            if ((this.GetMessageList1OperationCompleted == null)) {
                this.GetMessageList1OperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMessageList1OperationCompleted);
            }
            this.InvokeAsync("GetMessageList1", new object[] {
                        userID,
                        folderName,
                        isRead,
                        startDate,
                        endDate,
                        sortDescending,
                        maxResults}, this.GetMessageList1OperationCompleted, userState);
        }
        
        private void OnGetMessageList1OperationCompleted(object arg) {
            if ((this.GetMessageList1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMessageList1Completed(this, new GetMessageList1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="GetMessageList2")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://faxcoreserver/services/GetMessageList1", RequestElementName="GetMessageList1", RequestNamespace="http://faxcoreserver/services/", ResponseElementName="GetMessageList1Response", ResponseNamespace="http://faxcoreserver/services/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute("GetMessageList1Result")]
        public string[] GetMessageList(long userID, string folderName, string startDate, string endDate, bool sortDescending, int maxResults) {
            object[] results = this.Invoke("GetMessageList2", new object[] {
                        userID,
                        folderName,
                        startDate,
                        endDate,
                        sortDescending,
                        maxResults});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void GetMessageList2Async(long userID, string folderName, string startDate, string endDate, bool sortDescending, int maxResults) {
            this.GetMessageList2Async(userID, folderName, startDate, endDate, sortDescending, maxResults, null);
        }
        
        /// <remarks/>
        public void GetMessageList2Async(long userID, string folderName, string startDate, string endDate, bool sortDescending, int maxResults, object userState) {
            if ((this.GetMessageList2OperationCompleted == null)) {
                this.GetMessageList2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMessageList2OperationCompleted);
            }
            this.InvokeAsync("GetMessageList2", new object[] {
                        userID,
                        folderName,
                        startDate,
                        endDate,
                        sortDescending,
                        maxResults}, this.GetMessageList2OperationCompleted, userState);
        }
        
        private void OnGetMessageList2OperationCompleted(object arg) {
            if ((this.GetMessageList2Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMessageList2Completed(this, new GetMessageList2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="GetMessageList3")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://faxcoreserver/services/GetMessageList8", RequestElementName="GetMessageList8", RequestNamespace="http://faxcoreserver/services/", ResponseElementName="GetMessageList8Response", ResponseNamespace="http://faxcoreserver/services/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute("GetMessageList8Result")]
        public string[] GetMessageList(long userID, string folderName, bool sortDescending, int maxResults) {
            object[] results = this.Invoke("GetMessageList3", new object[] {
                        userID,
                        folderName,
                        sortDescending,
                        maxResults});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void GetMessageList3Async(long userID, string folderName, bool sortDescending, int maxResults) {
            this.GetMessageList3Async(userID, folderName, sortDescending, maxResults, null);
        }
        
        /// <remarks/>
        public void GetMessageList3Async(long userID, string folderName, bool sortDescending, int maxResults, object userState) {
            if ((this.GetMessageList3OperationCompleted == null)) {
                this.GetMessageList3OperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMessageList3OperationCompleted);
            }
            this.InvokeAsync("GetMessageList3", new object[] {
                        userID,
                        folderName,
                        sortDescending,
                        maxResults}, this.GetMessageList3OperationCompleted, userState);
        }
        
        private void OnGetMessageList3OperationCompleted(object arg) {
            if ((this.GetMessageList3Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMessageList3Completed(this, new GetMessageList3CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="GetMessageList4")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://faxcoreserver/services/GetMessageList4", RequestNamespace="http://faxcoreserver/services/", ResponseNamespace="http://faxcoreserver/services/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] GetMessageList(long[] userList, string folderName, bool isDownloaded, bool sortDescending, int maxResults) {
            object[] results = this.Invoke("GetMessageList4", new object[] {
                        userList,
                        folderName,
                        isDownloaded,
                        sortDescending,
                        maxResults});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void GetMessageList4Async(long[] userList, string folderName, bool isDownloaded, bool sortDescending, int maxResults) {
            this.GetMessageList4Async(userList, folderName, isDownloaded, sortDescending, maxResults, null);
        }
        
        /// <remarks/>
        public void GetMessageList4Async(long[] userList, string folderName, bool isDownloaded, bool sortDescending, int maxResults, object userState) {
            if ((this.GetMessageList4OperationCompleted == null)) {
                this.GetMessageList4OperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMessageList4OperationCompleted);
            }
            this.InvokeAsync("GetMessageList4", new object[] {
                        userList,
                        folderName,
                        isDownloaded,
                        sortDescending,
                        maxResults}, this.GetMessageList4OperationCompleted, userState);
        }
        
        private void OnGetMessageList4OperationCompleted(object arg) {
            if ((this.GetMessageList4Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMessageList4Completed(this, new GetMessageList4CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="GetMessageList5")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://faxcoreserver/services/GetMessageList5", RequestNamespace="http://faxcoreserver/services/", ResponseNamespace="http://faxcoreserver/services/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] GetMessageList(long[] userList, string folderName, bool isDownloaded, bool isRead, string startDate, string endDate, bool sortDescending, int maxResults) {
            object[] results = this.Invoke("GetMessageList5", new object[] {
                        userList,
                        folderName,
                        isDownloaded,
                        isRead,
                        startDate,
                        endDate,
                        sortDescending,
                        maxResults});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void GetMessageList5Async(long[] userList, string folderName, bool isDownloaded, bool isRead, string startDate, string endDate, bool sortDescending, int maxResults) {
            this.GetMessageList5Async(userList, folderName, isDownloaded, isRead, startDate, endDate, sortDescending, maxResults, null);
        }
        
        /// <remarks/>
        public void GetMessageList5Async(long[] userList, string folderName, bool isDownloaded, bool isRead, string startDate, string endDate, bool sortDescending, int maxResults, object userState) {
            if ((this.GetMessageList5OperationCompleted == null)) {
                this.GetMessageList5OperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMessageList5OperationCompleted);
            }
            this.InvokeAsync("GetMessageList5", new object[] {
                        userList,
                        folderName,
                        isDownloaded,
                        isRead,
                        startDate,
                        endDate,
                        sortDescending,
                        maxResults}, this.GetMessageList5OperationCompleted, userState);
        }
        
        private void OnGetMessageList5OperationCompleted(object arg) {
            if ((this.GetMessageList5Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMessageList5Completed(this, new GetMessageList5CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="GetMessageList6")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://faxcoreserver/services/GetMessageList6", RequestNamespace="http://faxcoreserver/services/", ResponseNamespace="http://faxcoreserver/services/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] GetMessageList(long[] userList, string folderName, bool isDownloaded, string startDate, string endDate, bool sortDescending, int maxResults) {
            object[] results = this.Invoke("GetMessageList6", new object[] {
                        userList,
                        folderName,
                        isDownloaded,
                        startDate,
                        endDate,
                        sortDescending,
                        maxResults});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void GetMessageList6Async(long[] userList, string folderName, bool isDownloaded, string startDate, string endDate, bool sortDescending, int maxResults) {
            this.GetMessageList6Async(userList, folderName, isDownloaded, startDate, endDate, sortDescending, maxResults, null);
        }
        
        /// <remarks/>
        public void GetMessageList6Async(long[] userList, string folderName, bool isDownloaded, string startDate, string endDate, bool sortDescending, int maxResults, object userState) {
            if ((this.GetMessageList6OperationCompleted == null)) {
                this.GetMessageList6OperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMessageList6OperationCompleted);
            }
            this.InvokeAsync("GetMessageList6", new object[] {
                        userList,
                        folderName,
                        isDownloaded,
                        startDate,
                        endDate,
                        sortDescending,
                        maxResults}, this.GetMessageList6OperationCompleted, userState);
        }
        
        private void OnGetMessageList6OperationCompleted(object arg) {
            if ((this.GetMessageList6Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMessageList6Completed(this, new GetMessageList6CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="GetMessageList7")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://faxcoreserver/services/GetMessageList7", RequestNamespace="http://faxcoreserver/services/", ResponseNamespace="http://faxcoreserver/services/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] GetMessageList(long[] userList, string folderName, bool isDownloaded, bool isRead, bool sortDescending, int maxResults) {
            object[] results = this.Invoke("GetMessageList7", new object[] {
                        userList,
                        folderName,
                        isDownloaded,
                        isRead,
                        sortDescending,
                        maxResults});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void GetMessageList7Async(long[] userList, string folderName, bool isDownloaded, bool isRead, bool sortDescending, int maxResults) {
            this.GetMessageList7Async(userList, folderName, isDownloaded, isRead, sortDescending, maxResults, null);
        }
        
        /// <remarks/>
        public void GetMessageList7Async(long[] userList, string folderName, bool isDownloaded, bool isRead, bool sortDescending, int maxResults, object userState) {
            if ((this.GetMessageList7OperationCompleted == null)) {
                this.GetMessageList7OperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMessageList7OperationCompleted);
            }
            this.InvokeAsync("GetMessageList7", new object[] {
                        userList,
                        folderName,
                        isDownloaded,
                        isRead,
                        sortDescending,
                        maxResults}, this.GetMessageList7OperationCompleted, userState);
        }
        
        private void OnGetMessageList7OperationCompleted(object arg) {
            if ((this.GetMessageList7Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMessageList7Completed(this, new GetMessageList7CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://faxcoreserver/services/DownloadMessageByte1", RequestElementName="DownloadMessageByte1", RequestNamespace="http://faxcoreserver/services/", ResponseElementName="DownloadMessageByte1Response", ResponseNamespace="http://faxcoreserver/services/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("DownloadMessageByte1Result")]
        public string DownloadMessageByte(string messageID, int deliveryNum, string downloadType, int startPageIndex, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] out byte[] output) {
            object[] results = this.Invoke("DownloadMessageByte", new object[] {
                        messageID,
                        deliveryNum,
                        downloadType,
                        startPageIndex});
            output = ((byte[])(results[1]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void DownloadMessageByteAsync(string messageID, int deliveryNum, string downloadType, int startPageIndex) {
            this.DownloadMessageByteAsync(messageID, deliveryNum, downloadType, startPageIndex, null);
        }
        
        /// <remarks/>
        public void DownloadMessageByteAsync(string messageID, int deliveryNum, string downloadType, int startPageIndex, object userState) {
            if ((this.DownloadMessageByteOperationCompleted == null)) {
                this.DownloadMessageByteOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDownloadMessageByteOperationCompleted);
            }
            this.InvokeAsync("DownloadMessageByte", new object[] {
                        messageID,
                        deliveryNum,
                        downloadType,
                        startPageIndex}, this.DownloadMessageByteOperationCompleted, userState);
        }
        
        private void OnDownloadMessageByteOperationCompleted(object arg) {
            if ((this.DownloadMessageByteCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DownloadMessageByteCompleted(this, new DownloadMessageByteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="DownloadMessageByte1")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://faxcoreserver/services/DownloadMessageInByte2", RequestElementName="DownloadMessageInByte2", RequestNamespace="http://faxcoreserver/services/", ResponseElementName="DownloadMessageInByte2Response", ResponseNamespace="http://faxcoreserver/services/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("DownloadMessageInByte2Result")]
        public string DownloadMessageByte(string messageID, int deliveryNum, string downloadType, int startPageIndex, int[] excludePageList, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] out byte[] output) {
            object[] results = this.Invoke("DownloadMessageByte1", new object[] {
                        messageID,
                        deliveryNum,
                        downloadType,
                        startPageIndex,
                        excludePageList});
            output = ((byte[])(results[1]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void DownloadMessageByte1Async(string messageID, int deliveryNum, string downloadType, int startPageIndex, int[] excludePageList) {
            this.DownloadMessageByte1Async(messageID, deliveryNum, downloadType, startPageIndex, excludePageList, null);
        }
        
        /// <remarks/>
        public void DownloadMessageByte1Async(string messageID, int deliveryNum, string downloadType, int startPageIndex, int[] excludePageList, object userState) {
            if ((this.DownloadMessageByte1OperationCompleted == null)) {
                this.DownloadMessageByte1OperationCompleted = new System.Threading.SendOrPostCallback(this.OnDownloadMessageByte1OperationCompleted);
            }
            this.InvokeAsync("DownloadMessageByte1", new object[] {
                        messageID,
                        deliveryNum,
                        downloadType,
                        startPageIndex,
                        excludePageList}, this.DownloadMessageByte1OperationCompleted, userState);
        }
        
        private void OnDownloadMessageByte1OperationCompleted(object arg) {
            if ((this.DownloadMessageByte1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DownloadMessageByte1Completed(this, new DownloadMessageByte1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="DownloadMessageByte2")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://faxcoreserver/services/DownloadMessageInByte3", RequestElementName="DownloadMessageInByte3", RequestNamespace="http://faxcoreserver/services/", ResponseElementName="DownloadMessageInByte3Response", ResponseNamespace="http://faxcoreserver/services/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("DownloadMessageInByte3Result")]
        public string DownloadMessageByte(string deliveryID, string downloadType, int startPageIndex, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] out byte[] output) {
            object[] results = this.Invoke("DownloadMessageByte2", new object[] {
                        deliveryID,
                        downloadType,
                        startPageIndex});
            output = ((byte[])(results[1]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void DownloadMessageByte2Async(string deliveryID, string downloadType, int startPageIndex) {
            this.DownloadMessageByte2Async(deliveryID, downloadType, startPageIndex, null);
        }
        
        /// <remarks/>
        public void DownloadMessageByte2Async(string deliveryID, string downloadType, int startPageIndex, object userState) {
            if ((this.DownloadMessageByte2OperationCompleted == null)) {
                this.DownloadMessageByte2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnDownloadMessageByte2OperationCompleted);
            }
            this.InvokeAsync("DownloadMessageByte2", new object[] {
                        deliveryID,
                        downloadType,
                        startPageIndex}, this.DownloadMessageByte2OperationCompleted, userState);
        }
        
        private void OnDownloadMessageByte2OperationCompleted(object arg) {
            if ((this.DownloadMessageByte2Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DownloadMessageByte2Completed(this, new DownloadMessageByte2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="DownloadMessageByte3")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://faxcoreserver/services/DownloadMessageInByte4", RequestElementName="DownloadMessageInByte4", RequestNamespace="http://faxcoreserver/services/", ResponseElementName="DownloadMessageInByte4Response", ResponseNamespace="http://faxcoreserver/services/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("DownloadMessageInByte4Result")]
        public string DownloadMessageByte(string deliveryID, string downloadType, int startPageIndex, int[] excludePageList, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] out byte[] output) {
            object[] results = this.Invoke("DownloadMessageByte3", new object[] {
                        deliveryID,
                        downloadType,
                        startPageIndex,
                        excludePageList});
            output = ((byte[])(results[1]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void DownloadMessageByte3Async(string deliveryID, string downloadType, int startPageIndex, int[] excludePageList) {
            this.DownloadMessageByte3Async(deliveryID, downloadType, startPageIndex, excludePageList, null);
        }
        
        /// <remarks/>
        public void DownloadMessageByte3Async(string deliveryID, string downloadType, int startPageIndex, int[] excludePageList, object userState) {
            if ((this.DownloadMessageByte3OperationCompleted == null)) {
                this.DownloadMessageByte3OperationCompleted = new System.Threading.SendOrPostCallback(this.OnDownloadMessageByte3OperationCompleted);
            }
            this.InvokeAsync("DownloadMessageByte3", new object[] {
                        deliveryID,
                        downloadType,
                        startPageIndex,
                        excludePageList}, this.DownloadMessageByte3OperationCompleted, userState);
        }
        
        private void OnDownloadMessageByte3OperationCompleted(object arg) {
            if ((this.DownloadMessageByte3Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DownloadMessageByte3Completed(this, new DownloadMessageByte3CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://faxcoreserver/services/MarkMsgAsRead", RequestNamespace="http://faxcoreserver/services/", ResponseNamespace="http://faxcoreserver/services/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string MarkMsgAsRead(long userID, string msgID) {
            object[] results = this.Invoke("MarkMsgAsRead", new object[] {
                        userID,
                        msgID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void MarkMsgAsReadAsync(long userID, string msgID) {
            this.MarkMsgAsReadAsync(userID, msgID, null);
        }
        
        /// <remarks/>
        public void MarkMsgAsReadAsync(long userID, string msgID, object userState) {
            if ((this.MarkMsgAsReadOperationCompleted == null)) {
                this.MarkMsgAsReadOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMarkMsgAsReadOperationCompleted);
            }
            this.InvokeAsync("MarkMsgAsRead", new object[] {
                        userID,
                        msgID}, this.MarkMsgAsReadOperationCompleted, userState);
        }
        
        private void OnMarkMsgAsReadOperationCompleted(object arg) {
            if ((this.MarkMsgAsReadCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MarkMsgAsReadCompleted(this, new MarkMsgAsReadCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://faxcoreserver/services/MarkMsgAsUnread", RequestNamespace="http://faxcoreserver/services/", ResponseNamespace="http://faxcoreserver/services/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string MarkMsgAsUnread(long userID, string msgID) {
            object[] results = this.Invoke("MarkMsgAsUnread", new object[] {
                        userID,
                        msgID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void MarkMsgAsUnreadAsync(long userID, string msgID) {
            this.MarkMsgAsUnreadAsync(userID, msgID, null);
        }
        
        /// <remarks/>
        public void MarkMsgAsUnreadAsync(long userID, string msgID, object userState) {
            if ((this.MarkMsgAsUnreadOperationCompleted == null)) {
                this.MarkMsgAsUnreadOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMarkMsgAsUnreadOperationCompleted);
            }
            this.InvokeAsync("MarkMsgAsUnread", new object[] {
                        userID,
                        msgID}, this.MarkMsgAsUnreadOperationCompleted, userState);
        }
        
        private void OnMarkMsgAsUnreadOperationCompleted(object arg) {
            if ((this.MarkMsgAsUnreadCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MarkMsgAsUnreadCompleted(this, new MarkMsgAsUnreadCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://faxcoreserver/services/IsMessageRead", RequestNamespace="http://faxcoreserver/services/", ResponseNamespace="http://faxcoreserver/services/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool IsMessageRead(long userID, string msgID) {
            object[] results = this.Invoke("IsMessageRead", new object[] {
                        userID,
                        msgID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void IsMessageReadAsync(long userID, string msgID) {
            this.IsMessageReadAsync(userID, msgID, null);
        }
        
        /// <remarks/>
        public void IsMessageReadAsync(long userID, string msgID, object userState) {
            if ((this.IsMessageReadOperationCompleted == null)) {
                this.IsMessageReadOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsMessageReadOperationCompleted);
            }
            this.InvokeAsync("IsMessageRead", new object[] {
                        userID,
                        msgID}, this.IsMessageReadOperationCompleted, userState);
        }
        
        private void OnIsMessageReadOperationCompleted(object arg) {
            if ((this.IsMessageReadCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsMessageReadCompleted(this, new IsMessageReadCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://faxcoreserver/services/MarkMsgAsDownloaded", RequestNamespace="http://faxcoreserver/services/", ResponseNamespace="http://faxcoreserver/services/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string MarkMsgAsDownloaded(long userID, string msgID) {
            object[] results = this.Invoke("MarkMsgAsDownloaded", new object[] {
                        userID,
                        msgID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void MarkMsgAsDownloadedAsync(long userID, string msgID) {
            this.MarkMsgAsDownloadedAsync(userID, msgID, null);
        }
        
        /// <remarks/>
        public void MarkMsgAsDownloadedAsync(long userID, string msgID, object userState) {
            if ((this.MarkMsgAsDownloadedOperationCompleted == null)) {
                this.MarkMsgAsDownloadedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMarkMsgAsDownloadedOperationCompleted);
            }
            this.InvokeAsync("MarkMsgAsDownloaded", new object[] {
                        userID,
                        msgID}, this.MarkMsgAsDownloadedOperationCompleted, userState);
        }
        
        private void OnMarkMsgAsDownloadedOperationCompleted(object arg) {
            if ((this.MarkMsgAsDownloadedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MarkMsgAsDownloadedCompleted(this, new MarkMsgAsDownloadedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://faxcoreserver/services/GetTrackRecords", RequestNamespace="http://faxcoreserver/services/", ResponseNamespace="http://faxcoreserver/services/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] GetTrackRecords(long msgID) {
            object[] results = this.Invoke("GetTrackRecords", new object[] {
                        msgID});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void GetTrackRecordsAsync(long msgID) {
            this.GetTrackRecordsAsync(msgID, null);
        }
        
        /// <remarks/>
        public void GetTrackRecordsAsync(long msgID, object userState) {
            if ((this.GetTrackRecordsOperationCompleted == null)) {
                this.GetTrackRecordsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTrackRecordsOperationCompleted);
            }
            this.InvokeAsync("GetTrackRecords", new object[] {
                        msgID}, this.GetTrackRecordsOperationCompleted, userState);
        }
        
        private void OnGetTrackRecordsOperationCompleted(object arg) {
            if ((this.GetTrackRecordsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTrackRecordsCompleted(this, new GetTrackRecordsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://faxcoreserver/services/UpdateTrackRecord", RequestNamespace="http://faxcoreserver/services/", ResponseNamespace="http://faxcoreserver/services/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UpdateTrackRecord(long msgID, long trackID, string trackValue) {
            object[] results = this.Invoke("UpdateTrackRecord", new object[] {
                        msgID,
                        trackID,
                        trackValue});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateTrackRecordAsync(long msgID, long trackID, string trackValue) {
            this.UpdateTrackRecordAsync(msgID, trackID, trackValue, null);
        }
        
        /// <remarks/>
        public void UpdateTrackRecordAsync(long msgID, long trackID, string trackValue, object userState) {
            if ((this.UpdateTrackRecordOperationCompleted == null)) {
                this.UpdateTrackRecordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateTrackRecordOperationCompleted);
            }
            this.InvokeAsync("UpdateTrackRecord", new object[] {
                        msgID,
                        trackID,
                        trackValue}, this.UpdateTrackRecordOperationCompleted, userState);
        }
        
        private void OnUpdateTrackRecordOperationCompleted(object arg) {
            if ((this.UpdateTrackRecordCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateTrackRecordCompleted(this, new UpdateTrackRecordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://faxcoreserver/services/MoveMessage", RequestNamespace="http://faxcoreserver/services/", ResponseNamespace="http://faxcoreserver/services/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string MoveMessage(long userID, long msgID, string newFolderName) {
            object[] results = this.Invoke("MoveMessage", new object[] {
                        userID,
                        msgID,
                        newFolderName});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void MoveMessageAsync(long userID, long msgID, string newFolderName) {
            this.MoveMessageAsync(userID, msgID, newFolderName, null);
        }
        
        /// <remarks/>
        public void MoveMessageAsync(long userID, long msgID, string newFolderName, object userState) {
            if ((this.MoveMessageOperationCompleted == null)) {
                this.MoveMessageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMoveMessageOperationCompleted);
            }
            this.InvokeAsync("MoveMessage", new object[] {
                        userID,
                        msgID,
                        newFolderName}, this.MoveMessageOperationCompleted, userState);
        }
        
        private void OnMoveMessageOperationCompleted(object arg) {
            if ((this.MoveMessageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MoveMessageCompleted(this, new MoveMessageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://faxcoreserver/services/CreateNewUser1", RequestElementName="CreateNewUser1", RequestNamespace="http://faxcoreserver/services/", ResponseElementName="CreateNewUser1Response", ResponseNamespace="http://faxcoreserver/services/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("CreateNewUser1Result")]
        public string CreateUser(
                    long userID, 
                    string domainName, 
                    string userName, 
                    string password, 
                    Role role, 
                    bool isExternalAuth, 
                    bool isActive, 
                    string displayName, 
                    string firstName, 
                    string middleName, 
                    string lastName, 
                    string companyName, 
                    AddressType preferAddrType, 
                    string email, 
                    string fax, 
                    string rawFax, 
                    string desc) {
            object[] results = this.Invoke("CreateUser", new object[] {
                        userID,
                        domainName,
                        userName,
                        password,
                        role,
                        isExternalAuth,
                        isActive,
                        displayName,
                        firstName,
                        middleName,
                        lastName,
                        companyName,
                        preferAddrType,
                        email,
                        fax,
                        rawFax,
                        desc});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CreateUserAsync(
                    long userID, 
                    string domainName, 
                    string userName, 
                    string password, 
                    Role role, 
                    bool isExternalAuth, 
                    bool isActive, 
                    string displayName, 
                    string firstName, 
                    string middleName, 
                    string lastName, 
                    string companyName, 
                    AddressType preferAddrType, 
                    string email, 
                    string fax, 
                    string rawFax, 
                    string desc) {
            this.CreateUserAsync(userID, domainName, userName, password, role, isExternalAuth, isActive, displayName, firstName, middleName, lastName, companyName, preferAddrType, email, fax, rawFax, desc, null);
        }
        
        /// <remarks/>
        public void CreateUserAsync(
                    long userID, 
                    string domainName, 
                    string userName, 
                    string password, 
                    Role role, 
                    bool isExternalAuth, 
                    bool isActive, 
                    string displayName, 
                    string firstName, 
                    string middleName, 
                    string lastName, 
                    string companyName, 
                    AddressType preferAddrType, 
                    string email, 
                    string fax, 
                    string rawFax, 
                    string desc, 
                    object userState) {
            if ((this.CreateUserOperationCompleted == null)) {
                this.CreateUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateUserOperationCompleted);
            }
            this.InvokeAsync("CreateUser", new object[] {
                        userID,
                        domainName,
                        userName,
                        password,
                        role,
                        isExternalAuth,
                        isActive,
                        displayName,
                        firstName,
                        middleName,
                        lastName,
                        companyName,
                        preferAddrType,
                        email,
                        fax,
                        rawFax,
                        desc}, this.CreateUserOperationCompleted, userState);
        }
        
        private void OnCreateUserOperationCompleted(object arg) {
            if ((this.CreateUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateUserCompleted(this, new CreateUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="CreateUser1")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://faxcoreserver/services/CreateNewUser2", RequestElementName="CreateNewUser2", RequestNamespace="http://faxcoreserver/services/", ResponseElementName="CreateNewUser2Response", ResponseNamespace="http://faxcoreserver/services/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("CreateNewUser2Result")]
        public string CreateUser(
                    long userID, 
                    string domainName, 
                    string userName, 
                    string password, 
                    Role role, 
                    bool isExternalAuth, 
                    bool isActive, 
                    string displayName, 
                    string firstName, 
                    string middleName, 
                    string lastName, 
                    string companyName, 
                    AddressType preferAddrType, 
                    string email, 
                    string fax, 
                    string rawFax, 
                    bool NOR, 
                    bool NOS, 
                    string desc) {
            object[] results = this.Invoke("CreateUser1", new object[] {
                        userID,
                        domainName,
                        userName,
                        password,
                        role,
                        isExternalAuth,
                        isActive,
                        displayName,
                        firstName,
                        middleName,
                        lastName,
                        companyName,
                        preferAddrType,
                        email,
                        fax,
                        rawFax,
                        NOR,
                        NOS,
                        desc});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CreateUser1Async(
                    long userID, 
                    string domainName, 
                    string userName, 
                    string password, 
                    Role role, 
                    bool isExternalAuth, 
                    bool isActive, 
                    string displayName, 
                    string firstName, 
                    string middleName, 
                    string lastName, 
                    string companyName, 
                    AddressType preferAddrType, 
                    string email, 
                    string fax, 
                    string rawFax, 
                    bool NOR, 
                    bool NOS, 
                    string desc) {
            this.CreateUser1Async(userID, domainName, userName, password, role, isExternalAuth, isActive, displayName, firstName, middleName, lastName, companyName, preferAddrType, email, fax, rawFax, NOR, NOS, desc, null);
        }
        
        /// <remarks/>
        public void CreateUser1Async(
                    long userID, 
                    string domainName, 
                    string userName, 
                    string password, 
                    Role role, 
                    bool isExternalAuth, 
                    bool isActive, 
                    string displayName, 
                    string firstName, 
                    string middleName, 
                    string lastName, 
                    string companyName, 
                    AddressType preferAddrType, 
                    string email, 
                    string fax, 
                    string rawFax, 
                    bool NOR, 
                    bool NOS, 
                    string desc, 
                    object userState) {
            if ((this.CreateUser1OperationCompleted == null)) {
                this.CreateUser1OperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateUser1OperationCompleted);
            }
            this.InvokeAsync("CreateUser1", new object[] {
                        userID,
                        domainName,
                        userName,
                        password,
                        role,
                        isExternalAuth,
                        isActive,
                        displayName,
                        firstName,
                        middleName,
                        lastName,
                        companyName,
                        preferAddrType,
                        email,
                        fax,
                        rawFax,
                        NOR,
                        NOS,
                        desc}, this.CreateUser1OperationCompleted, userState);
        }
        
        private void OnCreateUser1OperationCompleted(object arg) {
            if ((this.CreateUser1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateUser1Completed(this, new CreateUser1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="CreateUser2")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://faxcoreserver/services/CreateNewUser3", RequestElementName="CreateNewUser3", RequestNamespace="http://faxcoreserver/services/", ResponseElementName="CreateNewUser3Response", ResponseNamespace="http://faxcoreserver/services/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("CreateNewUser3Result")]
        public string CreateUser(
                    long userID, 
                    string domainName, 
                    string userName, 
                    string password, 
                    Role role, 
                    bool isExternalAuth, 
                    bool isActive, 
                    string displayName, 
                    string firstName, 
                    string middleName, 
                    string lastName, 
                    string companyName, 
                    AddressType preferAddrType, 
                    string email, 
                    string fax, 
                    string rawFax, 
                    bool NOR, 
                    bool NOS, 
                    string desc, 
                    string callerID, 
                    string csid) {
            object[] results = this.Invoke("CreateUser2", new object[] {
                        userID,
                        domainName,
                        userName,
                        password,
                        role,
                        isExternalAuth,
                        isActive,
                        displayName,
                        firstName,
                        middleName,
                        lastName,
                        companyName,
                        preferAddrType,
                        email,
                        fax,
                        rawFax,
                        NOR,
                        NOS,
                        desc,
                        callerID,
                        csid});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CreateUser2Async(
                    long userID, 
                    string domainName, 
                    string userName, 
                    string password, 
                    Role role, 
                    bool isExternalAuth, 
                    bool isActive, 
                    string displayName, 
                    string firstName, 
                    string middleName, 
                    string lastName, 
                    string companyName, 
                    AddressType preferAddrType, 
                    string email, 
                    string fax, 
                    string rawFax, 
                    bool NOR, 
                    bool NOS, 
                    string desc, 
                    string callerID, 
                    string csid) {
            this.CreateUser2Async(userID, domainName, userName, password, role, isExternalAuth, isActive, displayName, firstName, middleName, lastName, companyName, preferAddrType, email, fax, rawFax, NOR, NOS, desc, callerID, csid, null);
        }
        
        /// <remarks/>
        public void CreateUser2Async(
                    long userID, 
                    string domainName, 
                    string userName, 
                    string password, 
                    Role role, 
                    bool isExternalAuth, 
                    bool isActive, 
                    string displayName, 
                    string firstName, 
                    string middleName, 
                    string lastName, 
                    string companyName, 
                    AddressType preferAddrType, 
                    string email, 
                    string fax, 
                    string rawFax, 
                    bool NOR, 
                    bool NOS, 
                    string desc, 
                    string callerID, 
                    string csid, 
                    object userState) {
            if ((this.CreateUser2OperationCompleted == null)) {
                this.CreateUser2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateUser2OperationCompleted);
            }
            this.InvokeAsync("CreateUser2", new object[] {
                        userID,
                        domainName,
                        userName,
                        password,
                        role,
                        isExternalAuth,
                        isActive,
                        displayName,
                        firstName,
                        middleName,
                        lastName,
                        companyName,
                        preferAddrType,
                        email,
                        fax,
                        rawFax,
                        NOR,
                        NOS,
                        desc,
                        callerID,
                        csid}, this.CreateUser2OperationCompleted, userState);
        }
        
        private void OnCreateUser2OperationCompleted(object arg) {
            if ((this.CreateUser2Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateUser2Completed(this, new CreateUser2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://faxcoreserver/services/UpdateUser-basic", RequestElementName="UpdateUser-basic", RequestNamespace="http://faxcoreserver/services/", ResponseElementName="UpdateUser-basicResponse", ResponseNamespace="http://faxcoreserver/services/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("UpdateUser-basicResult")]
        public string UpdateUser(long adminID, long userID, Role role, bool isExternalAuth, bool isActive, string displayName, string firstName, string middleName, string lastName, string companyName, AddressType preferAddrType, string desc) {
            object[] results = this.Invoke("UpdateUser", new object[] {
                        adminID,
                        userID,
                        role,
                        isExternalAuth,
                        isActive,
                        displayName,
                        firstName,
                        middleName,
                        lastName,
                        companyName,
                        preferAddrType,
                        desc});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateUserAsync(long adminID, long userID, Role role, bool isExternalAuth, bool isActive, string displayName, string firstName, string middleName, string lastName, string companyName, AddressType preferAddrType, string desc) {
            this.UpdateUserAsync(adminID, userID, role, isExternalAuth, isActive, displayName, firstName, middleName, lastName, companyName, preferAddrType, desc, null);
        }
        
        /// <remarks/>
        public void UpdateUserAsync(long adminID, long userID, Role role, bool isExternalAuth, bool isActive, string displayName, string firstName, string middleName, string lastName, string companyName, AddressType preferAddrType, string desc, object userState) {
            if ((this.UpdateUserOperationCompleted == null)) {
                this.UpdateUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateUserOperationCompleted);
            }
            this.InvokeAsync("UpdateUser", new object[] {
                        adminID,
                        userID,
                        role,
                        isExternalAuth,
                        isActive,
                        displayName,
                        firstName,
                        middleName,
                        lastName,
                        companyName,
                        preferAddrType,
                        desc}, this.UpdateUserOperationCompleted, userState);
        }
        
        private void OnUpdateUserOperationCompleted(object arg) {
            if ((this.UpdateUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateUserCompleted(this, new UpdateUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="UpdateUser1")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://faxcoreserver/services/UpdateUser-extra", RequestElementName="UpdateUser-extra", RequestNamespace="http://faxcoreserver/services/", ResponseElementName="UpdateUser-extraResponse", ResponseNamespace="http://faxcoreserver/services/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("UpdateUser-extraResult")]
        public string UpdateUser(long adminID, long userID, Role role, bool isExternalAuth, bool isActive, string displayName, string firstName, string middleName, string lastName, string companyName, AddressType preferAddrType, string desc, string localCSID, string callerID) {
            object[] results = this.Invoke("UpdateUser1", new object[] {
                        adminID,
                        userID,
                        role,
                        isExternalAuth,
                        isActive,
                        displayName,
                        firstName,
                        middleName,
                        lastName,
                        companyName,
                        preferAddrType,
                        desc,
                        localCSID,
                        callerID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateUser1Async(long adminID, long userID, Role role, bool isExternalAuth, bool isActive, string displayName, string firstName, string middleName, string lastName, string companyName, AddressType preferAddrType, string desc, string localCSID, string callerID) {
            this.UpdateUser1Async(adminID, userID, role, isExternalAuth, isActive, displayName, firstName, middleName, lastName, companyName, preferAddrType, desc, localCSID, callerID, null);
        }
        
        /// <remarks/>
        public void UpdateUser1Async(long adminID, long userID, Role role, bool isExternalAuth, bool isActive, string displayName, string firstName, string middleName, string lastName, string companyName, AddressType preferAddrType, string desc, string localCSID, string callerID, object userState) {
            if ((this.UpdateUser1OperationCompleted == null)) {
                this.UpdateUser1OperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateUser1OperationCompleted);
            }
            this.InvokeAsync("UpdateUser1", new object[] {
                        adminID,
                        userID,
                        role,
                        isExternalAuth,
                        isActive,
                        displayName,
                        firstName,
                        middleName,
                        lastName,
                        companyName,
                        preferAddrType,
                        desc,
                        localCSID,
                        callerID}, this.UpdateUser1OperationCompleted, userState);
        }
        
        private void OnUpdateUser1OperationCompleted(object arg) {
            if ((this.UpdateUser1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateUser1Completed(this, new UpdateUser1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="UpdateUser2")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://faxcoreserver/services/UpdateUser-advance", RequestElementName="UpdateUser-advance", RequestNamespace="http://faxcoreserver/services/", ResponseElementName="UpdateUser-advanceResponse", ResponseNamespace="http://faxcoreserver/services/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("UpdateUser-advanceResult")]
        public string UpdateUser(long adminID, long userID, Role role, bool isExternalAuth, bool isActive, string displayName, string firstName, string middleName, string lastName, string companyName, AddressType preferAddrType, string desc, UserConfig[] config) {
            object[] results = this.Invoke("UpdateUser2", new object[] {
                        adminID,
                        userID,
                        role,
                        isExternalAuth,
                        isActive,
                        displayName,
                        firstName,
                        middleName,
                        lastName,
                        companyName,
                        preferAddrType,
                        desc,
                        config});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateUser2Async(long adminID, long userID, Role role, bool isExternalAuth, bool isActive, string displayName, string firstName, string middleName, string lastName, string companyName, AddressType preferAddrType, string desc, UserConfig[] config) {
            this.UpdateUser2Async(adminID, userID, role, isExternalAuth, isActive, displayName, firstName, middleName, lastName, companyName, preferAddrType, desc, config, null);
        }
        
        /// <remarks/>
        public void UpdateUser2Async(long adminID, long userID, Role role, bool isExternalAuth, bool isActive, string displayName, string firstName, string middleName, string lastName, string companyName, AddressType preferAddrType, string desc, UserConfig[] config, object userState) {
            if ((this.UpdateUser2OperationCompleted == null)) {
                this.UpdateUser2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateUser2OperationCompleted);
            }
            this.InvokeAsync("UpdateUser2", new object[] {
                        adminID,
                        userID,
                        role,
                        isExternalAuth,
                        isActive,
                        displayName,
                        firstName,
                        middleName,
                        lastName,
                        companyName,
                        preferAddrType,
                        desc,
                        config}, this.UpdateUser2OperationCompleted, userState);
        }
        
        private void OnUpdateUser2OperationCompleted(object arg) {
            if ((this.UpdateUser2Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateUser2Completed(this, new UpdateUser2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://faxcoreserver/services/RemoveUser", RequestNamespace="http://faxcoreserver/services/", ResponseNamespace="http://faxcoreserver/services/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string RemoveUser(long adminID, long userID) {
            object[] results = this.Invoke("RemoveUser", new object[] {
                        adminID,
                        userID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void RemoveUserAsync(long adminID, long userID) {
            this.RemoveUserAsync(adminID, userID, null);
        }
        
        /// <remarks/>
        public void RemoveUserAsync(long adminID, long userID, object userState) {
            if ((this.RemoveUserOperationCompleted == null)) {
                this.RemoveUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveUserOperationCompleted);
            }
            this.InvokeAsync("RemoveUser", new object[] {
                        adminID,
                        userID}, this.RemoveUserOperationCompleted, userState);
        }
        
        private void OnRemoveUserOperationCompleted(object arg) {
            if ((this.RemoveUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveUserCompleted(this, new RemoveUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://faxcoreserver/services/DeactivateUser", RequestNamespace="http://faxcoreserver/services/", ResponseNamespace="http://faxcoreserver/services/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string DeactivateUser(long adminID, long userID) {
            object[] results = this.Invoke("DeactivateUser", new object[] {
                        adminID,
                        userID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void DeactivateUserAsync(long adminID, long userID) {
            this.DeactivateUserAsync(adminID, userID, null);
        }
        
        /// <remarks/>
        public void DeactivateUserAsync(long adminID, long userID, object userState) {
            if ((this.DeactivateUserOperationCompleted == null)) {
                this.DeactivateUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeactivateUserOperationCompleted);
            }
            this.InvokeAsync("DeactivateUser", new object[] {
                        adminID,
                        userID}, this.DeactivateUserOperationCompleted, userState);
        }
        
        private void OnDeactivateUserOperationCompleted(object arg) {
            if ((this.DeactivateUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeactivateUserCompleted(this, new DeactivateUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://faxcoreserver/services/DeactivateUsers", RequestNamespace="http://faxcoreserver/services/", ResponseNamespace="http://faxcoreserver/services/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string DeactivateUsers(long adminID, long[] userIDList) {
            object[] results = this.Invoke("DeactivateUsers", new object[] {
                        adminID,
                        userIDList});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void DeactivateUsersAsync(long adminID, long[] userIDList) {
            this.DeactivateUsersAsync(adminID, userIDList, null);
        }
        
        /// <remarks/>
        public void DeactivateUsersAsync(long adminID, long[] userIDList, object userState) {
            if ((this.DeactivateUsersOperationCompleted == null)) {
                this.DeactivateUsersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeactivateUsersOperationCompleted);
            }
            this.InvokeAsync("DeactivateUsers", new object[] {
                        adminID,
                        userIDList}, this.DeactivateUsersOperationCompleted, userState);
        }
        
        private void OnDeactivateUsersOperationCompleted(object arg) {
            if ((this.DeactivateUsersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeactivateUsersCompleted(this, new DeactivateUsersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://faxcoreserver/services/ActivateUser", RequestNamespace="http://faxcoreserver/services/", ResponseNamespace="http://faxcoreserver/services/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ActivateUser(long adminID, long userID) {
            object[] results = this.Invoke("ActivateUser", new object[] {
                        adminID,
                        userID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ActivateUserAsync(long adminID, long userID) {
            this.ActivateUserAsync(adminID, userID, null);
        }
        
        /// <remarks/>
        public void ActivateUserAsync(long adminID, long userID, object userState) {
            if ((this.ActivateUserOperationCompleted == null)) {
                this.ActivateUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnActivateUserOperationCompleted);
            }
            this.InvokeAsync("ActivateUser", new object[] {
                        adminID,
                        userID}, this.ActivateUserOperationCompleted, userState);
        }
        
        private void OnActivateUserOperationCompleted(object arg) {
            if ((this.ActivateUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ActivateUserCompleted(this, new ActivateUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://faxcoreserver/services/ActivateUsers", RequestNamespace="http://faxcoreserver/services/", ResponseNamespace="http://faxcoreserver/services/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ActivateUsers(long adminID, long[] userIDList) {
            object[] results = this.Invoke("ActivateUsers", new object[] {
                        adminID,
                        userIDList});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ActivateUsersAsync(long adminID, long[] userIDList) {
            this.ActivateUsersAsync(adminID, userIDList, null);
        }
        
        /// <remarks/>
        public void ActivateUsersAsync(long adminID, long[] userIDList, object userState) {
            if ((this.ActivateUsersOperationCompleted == null)) {
                this.ActivateUsersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnActivateUsersOperationCompleted);
            }
            this.InvokeAsync("ActivateUsers", new object[] {
                        adminID,
                        userIDList}, this.ActivateUsersOperationCompleted, userState);
        }
        
        private void OnActivateUsersOperationCompleted(object arg) {
            if ((this.ActivateUsersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ActivateUsersCompleted(this, new ActivateUsersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://faxcoreserver/services/GetUserListWithDomainID", RequestElementName="GetUserListWithDomainID", RequestNamespace="http://faxcoreserver/services/", ResponseElementName="GetUserListWithDomainIDResponse", ResponseNamespace="http://faxcoreserver/services/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute("GetUserListWithDomainIDResult")]
        public string[] GetUserList(long adminID, long domainID) {
            object[] results = this.Invoke("GetUserList", new object[] {
                        adminID,
                        domainID});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void GetUserListAsync(long adminID, long domainID) {
            this.GetUserListAsync(adminID, domainID, null);
        }
        
        /// <remarks/>
        public void GetUserListAsync(long adminID, long domainID, object userState) {
            if ((this.GetUserListOperationCompleted == null)) {
                this.GetUserListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserListOperationCompleted);
            }
            this.InvokeAsync("GetUserList", new object[] {
                        adminID,
                        domainID}, this.GetUserListOperationCompleted, userState);
        }
        
        private void OnGetUserListOperationCompleted(object arg) {
            if ((this.GetUserListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUserListCompleted(this, new GetUserListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="GetUserList1")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://faxcoreserver/services/GetUserListWithDomainName", RequestElementName="GetUserListWithDomainName", RequestNamespace="http://faxcoreserver/services/", ResponseElementName="GetUserListWithDomainNameResponse", ResponseNamespace="http://faxcoreserver/services/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute("GetUserListWithDomainNameResult")]
        public string[] GetUserList(long adminID, string domainName) {
            object[] results = this.Invoke("GetUserList1", new object[] {
                        adminID,
                        domainName});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void GetUserList1Async(long adminID, string domainName) {
            this.GetUserList1Async(adminID, domainName, null);
        }
        
        /// <remarks/>
        public void GetUserList1Async(long adminID, string domainName, object userState) {
            if ((this.GetUserList1OperationCompleted == null)) {
                this.GetUserList1OperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserList1OperationCompleted);
            }
            this.InvokeAsync("GetUserList1", new object[] {
                        adminID,
                        domainName}, this.GetUserList1OperationCompleted, userState);
        }
        
        private void OnGetUserList1OperationCompleted(object arg) {
            if ((this.GetUserList1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUserList1Completed(this, new GetUserList1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://faxcoreserver/services/GetUserDetailsByUserID", RequestElementName="GetUserDetailsByUserID", RequestNamespace="http://faxcoreserver/services/", ResponseElementName="GetUserDetailsByUserIDResponse", ResponseNamespace="http://faxcoreserver/services/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("GetUserDetailsByUserIDResult")]
        public string GetUserDetails(long adminID, long userID) {
            object[] results = this.Invoke("GetUserDetails", new object[] {
                        adminID,
                        userID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetUserDetailsAsync(long adminID, long userID) {
            this.GetUserDetailsAsync(adminID, userID, null);
        }
        
        /// <remarks/>
        public void GetUserDetailsAsync(long adminID, long userID, object userState) {
            if ((this.GetUserDetailsOperationCompleted == null)) {
                this.GetUserDetailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserDetailsOperationCompleted);
            }
            this.InvokeAsync("GetUserDetails", new object[] {
                        adminID,
                        userID}, this.GetUserDetailsOperationCompleted, userState);
        }
        
        private void OnGetUserDetailsOperationCompleted(object arg) {
            if ((this.GetUserDetailsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUserDetailsCompleted(this, new GetUserDetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="GetUserDetails1")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://faxcoreserver/services/GetUserDetailsByUserName", RequestElementName="GetUserDetailsByUserName", RequestNamespace="http://faxcoreserver/services/", ResponseElementName="GetUserDetailsByUserNameResponse", ResponseNamespace="http://faxcoreserver/services/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("GetUserDetailsByUserNameResult")]
        public string GetUserDetails(long adminID, string userName) {
            object[] results = this.Invoke("GetUserDetails1", new object[] {
                        adminID,
                        userName});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetUserDetails1Async(long adminID, string userName) {
            this.GetUserDetails1Async(adminID, userName, null);
        }
        
        /// <remarks/>
        public void GetUserDetails1Async(long adminID, string userName, object userState) {
            if ((this.GetUserDetails1OperationCompleted == null)) {
                this.GetUserDetails1OperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserDetails1OperationCompleted);
            }
            this.InvokeAsync("GetUserDetails1", new object[] {
                        adminID,
                        userName}, this.GetUserDetails1OperationCompleted, userState);
        }
        
        private void OnGetUserDetails1OperationCompleted(object arg) {
            if ((this.GetUserDetails1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUserDetails1Completed(this, new GetUserDetails1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://faxcoreserver/services/CreateInboundRoute", RequestNamespace="http://faxcoreserver/services/", ResponseNamespace="http://faxcoreserver/services/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CreateInboundRoute(long userID, string forwardedUserName, ConditionType condition1, string conditionExp1, bool isAndOperator, ConditionType condition2, string conditionExp2, bool isActive, int priority) {
            object[] results = this.Invoke("CreateInboundRoute", new object[] {
                        userID,
                        forwardedUserName,
                        condition1,
                        conditionExp1,
                        isAndOperator,
                        condition2,
                        conditionExp2,
                        isActive,
                        priority});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CreateInboundRouteAsync(long userID, string forwardedUserName, ConditionType condition1, string conditionExp1, bool isAndOperator, ConditionType condition2, string conditionExp2, bool isActive, int priority) {
            this.CreateInboundRouteAsync(userID, forwardedUserName, condition1, conditionExp1, isAndOperator, condition2, conditionExp2, isActive, priority, null);
        }
        
        /// <remarks/>
        public void CreateInboundRouteAsync(long userID, string forwardedUserName, ConditionType condition1, string conditionExp1, bool isAndOperator, ConditionType condition2, string conditionExp2, bool isActive, int priority, object userState) {
            if ((this.CreateInboundRouteOperationCompleted == null)) {
                this.CreateInboundRouteOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateInboundRouteOperationCompleted);
            }
            this.InvokeAsync("CreateInboundRoute", new object[] {
                        userID,
                        forwardedUserName,
                        condition1,
                        conditionExp1,
                        isAndOperator,
                        condition2,
                        conditionExp2,
                        isActive,
                        priority}, this.CreateInboundRouteOperationCompleted, userState);
        }
        
        private void OnCreateInboundRouteOperationCompleted(object arg) {
            if ((this.CreateInboundRouteCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateInboundRouteCompleted(this, new CreateInboundRouteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://faxcoreserver/services/SearchIBRouteRules", RequestNamespace="http://faxcoreserver/services/", ResponseNamespace="http://faxcoreserver/services/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SearchIBRouteRules(long adminID, string input) {
            object[] results = this.Invoke("SearchIBRouteRules", new object[] {
                        adminID,
                        input});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SearchIBRouteRulesAsync(long adminID, string input) {
            this.SearchIBRouteRulesAsync(adminID, input, null);
        }
        
        /// <remarks/>
        public void SearchIBRouteRulesAsync(long adminID, string input, object userState) {
            if ((this.SearchIBRouteRulesOperationCompleted == null)) {
                this.SearchIBRouteRulesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSearchIBRouteRulesOperationCompleted);
            }
            this.InvokeAsync("SearchIBRouteRules", new object[] {
                        adminID,
                        input}, this.SearchIBRouteRulesOperationCompleted, userState);
        }
        
        private void OnSearchIBRouteRulesOperationCompleted(object arg) {
            if ((this.SearchIBRouteRulesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SearchIBRouteRulesCompleted(this, new SearchIBRouteRulesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://faxcoreserver/services/DisabledInboudRoute", RequestNamespace="http://faxcoreserver/services/", ResponseNamespace="http://faxcoreserver/services/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string DisabledInboudRoute(long adminID, int routeID) {
            object[] results = this.Invoke("DisabledInboudRoute", new object[] {
                        adminID,
                        routeID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void DisabledInboudRouteAsync(long adminID, int routeID) {
            this.DisabledInboudRouteAsync(adminID, routeID, null);
        }
        
        /// <remarks/>
        public void DisabledInboudRouteAsync(long adminID, int routeID, object userState) {
            if ((this.DisabledInboudRouteOperationCompleted == null)) {
                this.DisabledInboudRouteOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDisabledInboudRouteOperationCompleted);
            }
            this.InvokeAsync("DisabledInboudRoute", new object[] {
                        adminID,
                        routeID}, this.DisabledInboudRouteOperationCompleted, userState);
        }
        
        private void OnDisabledInboudRouteOperationCompleted(object arg) {
            if ((this.DisabledInboudRouteCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DisabledInboudRouteCompleted(this, new DisabledInboudRouteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://faxcoreserver/services/GetMsgFolders", RequestNamespace="http://faxcoreserver/services/", ResponseNamespace="http://faxcoreserver/services/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] GetMsgFolders(long userID) {
            object[] results = this.Invoke("GetMsgFolders", new object[] {
                        userID});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void GetMsgFoldersAsync(long userID) {
            this.GetMsgFoldersAsync(userID, null);
        }
        
        /// <remarks/>
        public void GetMsgFoldersAsync(long userID, object userState) {
            if ((this.GetMsgFoldersOperationCompleted == null)) {
                this.GetMsgFoldersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMsgFoldersOperationCompleted);
            }
            this.InvokeAsync("GetMsgFolders", new object[] {
                        userID}, this.GetMsgFoldersOperationCompleted, userState);
        }
        
        private void OnGetMsgFoldersOperationCompleted(object arg) {
            if ((this.GetMsgFoldersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMsgFoldersCompleted(this, new GetMsgFoldersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://faxcoreserver/services/GetDomainList", RequestNamespace="http://faxcoreserver/services/", ResponseNamespace="http://faxcoreserver/services/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] GetDomainList(long adminID) {
            object[] results = this.Invoke("GetDomainList", new object[] {
                        adminID});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void GetDomainListAsync(long adminID) {
            this.GetDomainListAsync(adminID, null);
        }
        
        /// <remarks/>
        public void GetDomainListAsync(long adminID, object userState) {
            if ((this.GetDomainListOperationCompleted == null)) {
                this.GetDomainListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDomainListOperationCompleted);
            }
            this.InvokeAsync("GetDomainList", new object[] {
                        adminID}, this.GetDomainListOperationCompleted, userState);
        }
        
        private void OnGetDomainListOperationCompleted(object arg) {
            if ((this.GetDomainListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDomainListCompleted(this, new GetDomainListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://faxcoreserver/services/GetUserFaxSettingByUserID", RequestElementName="GetUserFaxSettingByUserID", RequestNamespace="http://faxcoreserver/services/", ResponseElementName="GetUserFaxSettingByUserIDResponse", ResponseNamespace="http://faxcoreserver/services/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("GetUserFaxSettingByUserIDResult")]
        public string GetUserFaxSetting(long adminID, long userID) {
            object[] results = this.Invoke("GetUserFaxSetting", new object[] {
                        adminID,
                        userID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetUserFaxSettingAsync(long adminID, long userID) {
            this.GetUserFaxSettingAsync(adminID, userID, null);
        }
        
        /// <remarks/>
        public void GetUserFaxSettingAsync(long adminID, long userID, object userState) {
            if ((this.GetUserFaxSettingOperationCompleted == null)) {
                this.GetUserFaxSettingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserFaxSettingOperationCompleted);
            }
            this.InvokeAsync("GetUserFaxSetting", new object[] {
                        adminID,
                        userID}, this.GetUserFaxSettingOperationCompleted, userState);
        }
        
        private void OnGetUserFaxSettingOperationCompleted(object arg) {
            if ((this.GetUserFaxSettingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUserFaxSettingCompleted(this, new GetUserFaxSettingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="GetUserFaxSetting1")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://faxcoreserver/services/GetUserFaxSettingByUserName", RequestElementName="GetUserFaxSettingByUserName", RequestNamespace="http://faxcoreserver/services/", ResponseElementName="GetUserFaxSettingByUserNameResponse", ResponseNamespace="http://faxcoreserver/services/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("GetUserFaxSettingByUserNameResult")]
        public string GetUserFaxSetting(long adminID, string userName) {
            object[] results = this.Invoke("GetUserFaxSetting1", new object[] {
                        adminID,
                        userName});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetUserFaxSetting1Async(long adminID, string userName) {
            this.GetUserFaxSetting1Async(adminID, userName, null);
        }
        
        /// <remarks/>
        public void GetUserFaxSetting1Async(long adminID, string userName, object userState) {
            if ((this.GetUserFaxSetting1OperationCompleted == null)) {
                this.GetUserFaxSetting1OperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserFaxSetting1OperationCompleted);
            }
            this.InvokeAsync("GetUserFaxSetting1", new object[] {
                        adminID,
                        userName}, this.GetUserFaxSetting1OperationCompleted, userState);
        }
        
        private void OnGetUserFaxSetting1OperationCompleted(object arg) {
            if ((this.GetUserFaxSetting1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUserFaxSetting1Completed(this, new GetUserFaxSetting1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2053.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://faxcoreserver/services/")]
    public partial class UserConfig {
        
        private string configNameField;
        
        private string configValueField;
        
        /// <remarks/>
        public string ConfigName {
            get {
                return this.configNameField;
            }
            set {
                this.configNameField = value;
            }
        }
        
        /// <remarks/>
        public string ConfigValue {
            get {
                return this.configValueField;
            }
            set {
                this.configValueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2053.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://faxcoreserver/services/")]
    public partial class MsgTracking {
        
        private string trackLabelField;
        
        private string trackValueField;
        
        private long trackIDField;
        
        /// <remarks/>
        public string TrackLabel {
            get {
                return this.trackLabelField;
            }
            set {
                this.trackLabelField = value;
            }
        }
        
        /// <remarks/>
        public string TrackValue {
            get {
                return this.trackValueField;
            }
            set {
                this.trackValueField = value;
            }
        }
        
        /// <remarks/>
        public long TrackID {
            get {
                return this.trackIDField;
            }
            set {
                this.trackIDField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2053.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://faxcoreserver/services/")]
    public partial class MsgRecipient {
        
        private string nameField;
        
        private string compNameField;
        
        private string addressField;
        
        private int addressTypeField;
        
        private string notifyAddressField;
        
        private bool isRRFOnField;
        
        private bool isRRSOnField;
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public string CompName {
            get {
                return this.compNameField;
            }
            set {
                this.compNameField = value;
            }
        }
        
        /// <remarks/>
        public string Address {
            get {
                return this.addressField;
            }
            set {
                this.addressField = value;
            }
        }
        
        /// <remarks/>
        public int AddressType {
            get {
                return this.addressTypeField;
            }
            set {
                this.addressTypeField = value;
            }
        }
        
        /// <remarks/>
        public string NotifyAddress {
            get {
                return this.notifyAddressField;
            }
            set {
                this.notifyAddressField = value;
            }
        }
        
        /// <remarks/>
        public bool IsRRFOn {
            get {
                return this.isRRFOnField;
            }
            set {
                this.isRRFOnField = value;
            }
        }
        
        /// <remarks/>
        public bool IsRRSOn {
            get {
                return this.isRRSOnField;
            }
            set {
                this.isRRSOnField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2053.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://faxcoreserver/services/")]
    public partial class MsgDocument {
        
        private string nameField;
        
        private string pathField;
        
        private byte[] bytesField;
        
        private bool isMergeField;
        
        private bool removeFirstPageField;
        
        private string overlayTemplateNameField;
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public string Path {
            get {
                return this.pathField;
            }
            set {
                this.pathField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] Bytes {
            get {
                return this.bytesField;
            }
            set {
                this.bytesField = value;
            }
        }
        
        /// <remarks/>
        public bool IsMerge {
            get {
                return this.isMergeField;
            }
            set {
                this.isMergeField = value;
            }
        }
        
        /// <remarks/>
        public bool RemoveFirstPage {
            get {
                return this.removeFirstPageField;
            }
            set {
                this.removeFirstPageField = value;
            }
        }
        
        /// <remarks/>
        public string OverlayTemplateName {
            get {
                return this.overlayTemplateNameField;
            }
            set {
                this.overlayTemplateNameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2053.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://faxcoreserver/services/")]
    public enum Role {
        
        /// <remarks/>
        SystemAdmin,
        
        /// <remarks/>
        DomainAdmin,
        
        /// <remarks/>
        SuperUser,
        
        /// <remarks/>
        StandardUser,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2053.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://faxcoreserver/services/")]
    public enum AddressType {
        
        /// <remarks/>
        Fax,
        
        /// <remarks/>
        Email,
        
        /// <remarks/>
        FaxRaw,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2053.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://faxcoreserver/services/")]
    public enum ConditionType {
        
        /// <remarks/>
        None,
        
        /// <remarks/>
        BarCode,
        
        /// <remarks/>
        FaxPortNo,
        
        /// <remarks/>
        RoutingDigits,
        
        /// <remarks/>
        RemoteCallerID,
        
        /// <remarks/>
        RemoteCSID,
        
        /// <remarks/>
        ServerName,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void AuthenticateUserCompletedEventHandler(object sender, AuthenticateUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AuthenticateUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AuthenticateUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public long Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void ServerStatusCompletedEventHandler(object sender, ServerStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ServerStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ServerStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void SendMessageCompletedEventHandler(object sender, SendMessageCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendMessageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendMessageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void SendMixedModeCompletedEventHandler(object sender, SendMixedModeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendMixedModeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendMixedModeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void SendMessage1CompletedEventHandler(object sender, SendMessage1CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendMessage1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendMessage1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void SendMessage2CompletedEventHandler(object sender, SendMessage2CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendMessage2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendMessage2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void SendMessage3CompletedEventHandler(object sender, SendMessage3CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendMessage3CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendMessage3CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void DelegateMessageCompletedEventHandler(object sender, DelegateMessageCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DelegateMessageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DelegateMessageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void GetMessageDetailsCompletedEventHandler(object sender, GetMessageDetailsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMessageDetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMessageDetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void GetMessageDetails1CompletedEventHandler(object sender, GetMessageDetails1CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMessageDetails1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMessageDetails1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void GetMessageStatusCompletedEventHandler(object sender, GetMessageStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMessageStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMessageStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void IsMessageDeletedCompletedEventHandler(object sender, IsMessageDeletedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsMessageDeletedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsMessageDeletedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void DeleteMessageCompletedEventHandler(object sender, DeleteMessageCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteMessageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteMessageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void CancelMessageCompletedEventHandler(object sender, CancelMessageCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CancelMessageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CancelMessageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void RetryFailedCompletedEventHandler(object sender, RetryFailedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RetryFailedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RetryFailedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void ForwardToUserCompletedEventHandler(object sender, ForwardToUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ForwardToUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ForwardToUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void AssignMessageCompletedEventHandler(object sender, AssignMessageCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AssignMessageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AssignMessageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void GetMessageListCompletedEventHandler(object sender, GetMessageListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMessageListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMessageListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void GetMessageList1CompletedEventHandler(object sender, GetMessageList1CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMessageList1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMessageList1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void GetMessageList2CompletedEventHandler(object sender, GetMessageList2CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMessageList2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMessageList2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void GetMessageList3CompletedEventHandler(object sender, GetMessageList3CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMessageList3CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMessageList3CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void GetMessageList4CompletedEventHandler(object sender, GetMessageList4CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMessageList4CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMessageList4CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void GetMessageList5CompletedEventHandler(object sender, GetMessageList5CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMessageList5CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMessageList5CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void GetMessageList6CompletedEventHandler(object sender, GetMessageList6CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMessageList6CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMessageList6CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void GetMessageList7CompletedEventHandler(object sender, GetMessageList7CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMessageList7CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMessageList7CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void DownloadMessageByteCompletedEventHandler(object sender, DownloadMessageByteCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DownloadMessageByteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DownloadMessageByteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public byte[] output {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void DownloadMessageByte1CompletedEventHandler(object sender, DownloadMessageByte1CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DownloadMessageByte1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DownloadMessageByte1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public byte[] output {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void DownloadMessageByte2CompletedEventHandler(object sender, DownloadMessageByte2CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DownloadMessageByte2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DownloadMessageByte2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public byte[] output {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void DownloadMessageByte3CompletedEventHandler(object sender, DownloadMessageByte3CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DownloadMessageByte3CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DownloadMessageByte3CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public byte[] output {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void MarkMsgAsReadCompletedEventHandler(object sender, MarkMsgAsReadCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MarkMsgAsReadCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MarkMsgAsReadCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void MarkMsgAsUnreadCompletedEventHandler(object sender, MarkMsgAsUnreadCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MarkMsgAsUnreadCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MarkMsgAsUnreadCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void IsMessageReadCompletedEventHandler(object sender, IsMessageReadCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsMessageReadCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsMessageReadCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void MarkMsgAsDownloadedCompletedEventHandler(object sender, MarkMsgAsDownloadedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MarkMsgAsDownloadedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MarkMsgAsDownloadedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void GetTrackRecordsCompletedEventHandler(object sender, GetTrackRecordsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTrackRecordsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTrackRecordsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void UpdateTrackRecordCompletedEventHandler(object sender, UpdateTrackRecordCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateTrackRecordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateTrackRecordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void MoveMessageCompletedEventHandler(object sender, MoveMessageCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MoveMessageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MoveMessageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void CreateUserCompletedEventHandler(object sender, CreateUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void CreateUser1CompletedEventHandler(object sender, CreateUser1CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateUser1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateUser1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void CreateUser2CompletedEventHandler(object sender, CreateUser2CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateUser2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateUser2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void UpdateUserCompletedEventHandler(object sender, UpdateUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void UpdateUser1CompletedEventHandler(object sender, UpdateUser1CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateUser1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateUser1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void UpdateUser2CompletedEventHandler(object sender, UpdateUser2CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateUser2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateUser2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void RemoveUserCompletedEventHandler(object sender, RemoveUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RemoveUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RemoveUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void DeactivateUserCompletedEventHandler(object sender, DeactivateUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeactivateUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeactivateUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void DeactivateUsersCompletedEventHandler(object sender, DeactivateUsersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeactivateUsersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeactivateUsersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void ActivateUserCompletedEventHandler(object sender, ActivateUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ActivateUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ActivateUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void ActivateUsersCompletedEventHandler(object sender, ActivateUsersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ActivateUsersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ActivateUsersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void GetUserListCompletedEventHandler(object sender, GetUserListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUserListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUserListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void GetUserList1CompletedEventHandler(object sender, GetUserList1CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUserList1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUserList1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void GetUserDetailsCompletedEventHandler(object sender, GetUserDetailsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUserDetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUserDetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void GetUserDetails1CompletedEventHandler(object sender, GetUserDetails1CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUserDetails1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUserDetails1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void CreateInboundRouteCompletedEventHandler(object sender, CreateInboundRouteCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateInboundRouteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateInboundRouteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void SearchIBRouteRulesCompletedEventHandler(object sender, SearchIBRouteRulesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SearchIBRouteRulesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SearchIBRouteRulesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void DisabledInboudRouteCompletedEventHandler(object sender, DisabledInboudRouteCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DisabledInboudRouteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DisabledInboudRouteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void GetMsgFoldersCompletedEventHandler(object sender, GetMsgFoldersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMsgFoldersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMsgFoldersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void GetDomainListCompletedEventHandler(object sender, GetDomainListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDomainListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDomainListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void GetUserFaxSettingCompletedEventHandler(object sender, GetUserFaxSettingCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUserFaxSettingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUserFaxSettingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void GetUserFaxSetting1CompletedEventHandler(object sender, GetUserFaxSetting1CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUserFaxSetting1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUserFaxSetting1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591